
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003654  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  00020690  2**0
                  CONTENTS
  4 .ARM          00000008  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003864  08003864  00020690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000690  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000690  08003efc  00020690  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  08003efc  0002077c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020690  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b23  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ad  00000000  00000000  000291e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0002a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c70  00000000  00000000  00040f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ddd  00000000  00000000  00049b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e98  00000000  00000000  000cf9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000690 	.word	0x20000690
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037dc 	.word	0x080037dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000694 	.word	0x20000694
 80001dc:	080037dc 	.word	0x080037dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc22 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f9ca 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fa5c 	bl	8000a5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 fa30 	bl	8000a08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UARTInterruptConfig();
 80005a8:	f000 fac6 	bl	8000b38 <UARTInterruptConfig>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t timestamp = 0;
	  if (HAL_GetTick() > timestamp)
 80005ac:	f000 fc7e 	bl	8000eac <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	4ba1      	ldr	r3, [pc, #644]	; (8000838 <main+0x2a4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d92e      	bls.n	8000618 <main+0x84>
	  {

			if (Hz > 0)
 80005ba:	4ba0      	ldr	r3, [pc, #640]	; (800083c <main+0x2a8>)
 80005bc:	f993 3000 	ldrsb.w	r3, [r3]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dd0b      	ble.n	80005dc <main+0x48>
			{
				mHz = 500 / Hz;
 80005c4:	4b9d      	ldr	r3, [pc, #628]	; (800083c <main+0x2a8>)
 80005c6:	f993 3000 	ldrsb.w	r3, [r3]
 80005ca:	461a      	mov	r2, r3
 80005cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b9a      	ldr	r3, [pc, #616]	; (8000840 <main+0x2ac>)
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e002      	b.n	80005e2 <main+0x4e>
			}
			else
			{
				mHz = 0;
 80005dc:	4b98      	ldr	r3, [pc, #608]	; (8000840 <main+0x2ac>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
			}
			timestamp = HAL_GetTick() + mHz;
 80005e2:	f000 fc63 	bl	8000eac <HAL_GetTick>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a95      	ldr	r2, [pc, #596]	; (8000840 <main+0x2ac>)
 80005ea:	7812      	ldrb	r2, [r2, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a92      	ldr	r2, [pc, #584]	; (8000838 <main+0x2a4>)
 80005f0:	6013      	str	r3, [r2, #0]

			if(Status_LED == 0 || Hz == 0)
 80005f2:	4b94      	ldr	r3, [pc, #592]	; (8000844 <main+0x2b0>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d004      	beq.n	8000604 <main+0x70>
 80005fa:	4b90      	ldr	r3, [pc, #576]	; (800083c <main+0x2a8>)
 80005fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d105      	bne.n	8000610 <main+0x7c>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2120      	movs	r1, #32
 8000608:	488f      	ldr	r0, [pc, #572]	; (8000848 <main+0x2b4>)
 800060a:	f000 ffbf 	bl	800158c <HAL_GPIO_WritePin>
 800060e:	e003      	b.n	8000618 <main+0x84>
			}
			else
			{
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000610:	2120      	movs	r1, #32
 8000612:	488d      	ldr	r0, [pc, #564]	; (8000848 <main+0x2b4>)
 8000614:	f000 ffd3 	bl	80015be <HAL_GPIO_TogglePin>
			}
		}

	  // create State
	  switch (State){
 8000618:	4b8c      	ldr	r3, [pc, #560]	; (800084c <main+0x2b8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b05      	cmp	r3, #5
 800061e:	d8c5      	bhi.n	80005ac <main+0x18>
 8000620:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <main+0x94>)
 8000622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000626:	bf00      	nop
 8000628:	08000641 	.word	0x08000641
 800062c:	08000663 	.word	0x08000663
 8000630:	08000691 	.word	0x08000691
 8000634:	080006b3 	.word	0x080006b3
 8000638:	08000815 	.word	0x08000815
 800063c:	08000879 	.word	0x08000879

	  case 0: // First Menu
		  HAL_Delay(5); // delay = 5 ms.
 8000640:	2005      	movs	r0, #5
 8000642:	f000 fc3f 	bl	8000ec4 <HAL_Delay>
		  HAL_UART_Transmit_IT(&huart2, Start_Menu, strlen((char*) Start_Menu));
 8000646:	4882      	ldr	r0, [pc, #520]	; (8000850 <main+0x2bc>)
 8000648:	f7ff fdca 	bl	80001e0 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29b      	uxth	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	497f      	ldr	r1, [pc, #508]	; (8000850 <main+0x2bc>)
 8000654:	487f      	ldr	r0, [pc, #508]	; (8000854 <main+0x2c0>)
 8000656:	f001 fcb2 	bl	8001fbe <HAL_UART_Transmit_IT>

		  State = 1;
 800065a:	4b7c      	ldr	r3, [pc, #496]	; (800084c <main+0x2b8>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
		  break;
 8000660:	e155      	b.n	800090e <main+0x37a>

	  case 1: // Press 1 or 0
	  	  if (RxBuffer[0] == '0') // Press and go to LED Control
 8000662:	4b7d      	ldr	r3, [pc, #500]	; (8000858 <main+0x2c4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b30      	cmp	r3, #48	; 0x30
 8000668:	d106      	bne.n	8000678 <main+0xe4>
	  	  {
	  		  RxBuffer[0] = 0;
 800066a:	4b7b      	ldr	r3, [pc, #492]	; (8000858 <main+0x2c4>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]

	  		  State = 2;
 8000670:	4b76      	ldr	r3, [pc, #472]	; (800084c <main+0x2b8>)
 8000672:	2202      	movs	r2, #2
 8000674:	701a      	strb	r2, [r3, #0]
	  	  {
	  		  RxBuffer[0] = 0;

	  		  State = 4;
	  	  }
	  	  break;
 8000676:	e147      	b.n	8000908 <main+0x374>
	  	  else if (RxBuffer[0] == '1')  // Press and go to Button Status
 8000678:	4b77      	ldr	r3, [pc, #476]	; (8000858 <main+0x2c4>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b31      	cmp	r3, #49	; 0x31
 800067e:	f040 8143 	bne.w	8000908 <main+0x374>
	  		  RxBuffer[0] = 0;
 8000682:	4b75      	ldr	r3, [pc, #468]	; (8000858 <main+0x2c4>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	  		  State = 4;
 8000688:	4b70      	ldr	r3, [pc, #448]	; (800084c <main+0x2b8>)
 800068a:	2204      	movs	r2, #4
 800068c:	701a      	strb	r2, [r3, #0]
	  	  break;
 800068e:	e13b      	b.n	8000908 <main+0x374>

	  case 2: // Second Menu
		  HAL_Delay(5); // delay = 5 ms.
 8000690:	2005      	movs	r0, #5
 8000692:	f000 fc17 	bl	8000ec4 <HAL_Delay>
		  HAL_UART_Transmit_IT(&huart2, LED_Menu, strlen((char*) LED_Menu));
 8000696:	4871      	ldr	r0, [pc, #452]	; (800085c <main+0x2c8>)
 8000698:	f7ff fda2 	bl	80001e0 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29b      	uxth	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	496e      	ldr	r1, [pc, #440]	; (800085c <main+0x2c8>)
 80006a4:	486b      	ldr	r0, [pc, #428]	; (8000854 <main+0x2c0>)
 80006a6:	f001 fc8a 	bl	8001fbe <HAL_UART_Transmit_IT>

		  State = 3;
 80006aa:	4b68      	ldr	r3, [pc, #416]	; (800084c <main+0x2b8>)
 80006ac:	2203      	movs	r2, #3
 80006ae:	701a      	strb	r2, [r3, #0]
		  break;
 80006b0:	e12d      	b.n	800090e <main+0x37a>

	  case 3: // Press a, s, d, x
		  if (RxBuffer[0] == 'a')
 80006b2:	4b69      	ldr	r3, [pc, #420]	; (8000858 <main+0x2c4>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b61      	cmp	r3, #97	; 0x61
 80006b8:	d12a      	bne.n	8000710 <main+0x17c>
		  {
			  Hz += 1 ;
 80006ba:	4b60      	ldr	r3, [pc, #384]	; (800083c <main+0x2a8>)
 80006bc:	f993 3000 	ldrsb.w	r3, [r3]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	3301      	adds	r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	b25a      	sxtb	r2, r3
 80006c8:	4b5c      	ldr	r3, [pc, #368]	; (800083c <main+0x2a8>)
 80006ca:	701a      	strb	r2, [r3, #0]
			  Past_Hz += 1;
 80006cc:	4b64      	ldr	r3, [pc, #400]	; (8000860 <main+0x2cc>)
 80006ce:	f993 3000 	ldrsb.w	r3, [r3]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	3301      	adds	r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	b25a      	sxtb	r2, r3
 80006da:	4b61      	ldr	r3, [pc, #388]	; (8000860 <main+0x2cc>)
 80006dc:	701a      	strb	r2, [r3, #0]
			  sprintf((char*)box,"Hz = %d\r\n",Hz);
 80006de:	4b57      	ldr	r3, [pc, #348]	; (800083c <main+0x2a8>)
 80006e0:	f993 3000 	ldrsb.w	r3, [r3]
 80006e4:	461a      	mov	r2, r3
 80006e6:	495f      	ldr	r1, [pc, #380]	; (8000864 <main+0x2d0>)
 80006e8:	485f      	ldr	r0, [pc, #380]	; (8000868 <main+0x2d4>)
 80006ea:	f002 fc09 	bl	8002f00 <siprintf>
			  HAL_UART_Transmit_IT(&huart2,box, strlen((char*)box));
 80006ee:	485e      	ldr	r0, [pc, #376]	; (8000868 <main+0x2d4>)
 80006f0:	f7ff fd76 	bl	80001e0 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	495b      	ldr	r1, [pc, #364]	; (8000868 <main+0x2d4>)
 80006fc:	4855      	ldr	r0, [pc, #340]	; (8000854 <main+0x2c0>)
 80006fe:	f001 fc5e 	bl	8001fbe <HAL_UART_Transmit_IT>
			  State = 3;
 8000702:	4b52      	ldr	r3, [pc, #328]	; (800084c <main+0x2b8>)
 8000704:	2203      	movs	r2, #3
 8000706:	701a      	strb	r2, [r3, #0]
			  RxBuffer[0] = 0;
 8000708:	4b53      	ldr	r3, [pc, #332]	; (8000858 <main+0x2c4>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		  else if (RxBuffer[0] == 'x') // back
		  {
			  RxBuffer[0] = 0;
			  State = 0;
		  }
		  break;
 800070e:	e0fd      	b.n	800090c <main+0x378>
		  else if (RxBuffer[0] == 's')
 8000710:	4b51      	ldr	r3, [pc, #324]	; (8000858 <main+0x2c4>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b73      	cmp	r3, #115	; 0x73
 8000716:	d13a      	bne.n	800078e <main+0x1fa>
			  Hz -= 1;
 8000718:	4b48      	ldr	r3, [pc, #288]	; (800083c <main+0x2a8>)
 800071a:	f993 3000 	ldrsb.w	r3, [r3]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	3b01      	subs	r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	b25a      	sxtb	r2, r3
 8000726:	4b45      	ldr	r3, [pc, #276]	; (800083c <main+0x2a8>)
 8000728:	701a      	strb	r2, [r3, #0]
			  if (Hz <= 0)
 800072a:	4b44      	ldr	r3, [pc, #272]	; (800083c <main+0x2a8>)
 800072c:	f993 3000 	ldrsb.w	r3, [r3]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dc02      	bgt.n	800073a <main+0x1a6>
				  Hz = 0;
 8000734:	4b41      	ldr	r3, [pc, #260]	; (800083c <main+0x2a8>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
			  Past_Hz -= 1;
 800073a:	4b49      	ldr	r3, [pc, #292]	; (8000860 <main+0x2cc>)
 800073c:	f993 3000 	ldrsb.w	r3, [r3]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	b25a      	sxtb	r2, r3
 8000748:	4b45      	ldr	r3, [pc, #276]	; (8000860 <main+0x2cc>)
 800074a:	701a      	strb	r2, [r3, #0]
			  if (Past_Hz <= 0)
 800074c:	4b44      	ldr	r3, [pc, #272]	; (8000860 <main+0x2cc>)
 800074e:	f993 3000 	ldrsb.w	r3, [r3]
 8000752:	2b00      	cmp	r3, #0
 8000754:	dc02      	bgt.n	800075c <main+0x1c8>
				  Past_Hz = 0;
 8000756:	4b42      	ldr	r3, [pc, #264]	; (8000860 <main+0x2cc>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
			  sprintf((char*)box,"Hz = %d\r\n",Hz);
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <main+0x2a8>)
 800075e:	f993 3000 	ldrsb.w	r3, [r3]
 8000762:	461a      	mov	r2, r3
 8000764:	493f      	ldr	r1, [pc, #252]	; (8000864 <main+0x2d0>)
 8000766:	4840      	ldr	r0, [pc, #256]	; (8000868 <main+0x2d4>)
 8000768:	f002 fbca 	bl	8002f00 <siprintf>
			  HAL_UART_Transmit_IT(&huart2,box, strlen((char*)box));
 800076c:	483e      	ldr	r0, [pc, #248]	; (8000868 <main+0x2d4>)
 800076e:	f7ff fd37 	bl	80001e0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29b      	uxth	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	493b      	ldr	r1, [pc, #236]	; (8000868 <main+0x2d4>)
 800077a:	4836      	ldr	r0, [pc, #216]	; (8000854 <main+0x2c0>)
 800077c:	f001 fc1f 	bl	8001fbe <HAL_UART_Transmit_IT>
			  State = 3;
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <main+0x2b8>)
 8000782:	2203      	movs	r2, #3
 8000784:	701a      	strb	r2, [r3, #0]
			  RxBuffer[0] = 0;
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <main+0x2c4>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		  break;
 800078c:	e0be      	b.n	800090c <main+0x378>
		  else if (RxBuffer[0] == 'd')
 800078e:	4b32      	ldr	r3, [pc, #200]	; (8000858 <main+0x2c4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b64      	cmp	r3, #100	; 0x64
 8000794:	d132      	bne.n	80007fc <main+0x268>
			 if(Status_LED)
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <main+0x2b0>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d018      	beq.n	80007d0 <main+0x23c>
				Status_LED = 0;
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <main+0x2b0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
				RxBuffer[0] = 0;
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <main+0x2c4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
				Hz = 0;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <main+0x2a8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, LED_Off, strlen((char*) LED_Off));
 80007b0:	482e      	ldr	r0, [pc, #184]	; (800086c <main+0x2d8>)
 80007b2:	f7ff fd15 	bl	80001e0 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	492b      	ldr	r1, [pc, #172]	; (800086c <main+0x2d8>)
 80007be:	4825      	ldr	r0, [pc, #148]	; (8000854 <main+0x2c0>)
 80007c0:	f001 fbfd 	bl	8001fbe <HAL_UART_Transmit_IT>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2120      	movs	r1, #32
 80007c8:	481f      	ldr	r0, [pc, #124]	; (8000848 <main+0x2b4>)
 80007ca:	f000 fedf 	bl	800158c <HAL_GPIO_WritePin>
		  break;
 80007ce:	e09d      	b.n	800090c <main+0x378>
				Status_LED = 1;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <main+0x2b0>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
				RxBuffer[0] = 0;
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <main+0x2c4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
				Hz = Past_Hz;
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <main+0x2cc>)
 80007de:	f993 2000 	ldrsb.w	r2, [r3]
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <main+0x2a8>)
 80007e4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, LED_On, strlen((char*) LED_On));
 80007e6:	4822      	ldr	r0, [pc, #136]	; (8000870 <main+0x2dc>)
 80007e8:	f7ff fcfa 	bl	80001e0 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	461a      	mov	r2, r3
 80007f2:	491f      	ldr	r1, [pc, #124]	; (8000870 <main+0x2dc>)
 80007f4:	4817      	ldr	r0, [pc, #92]	; (8000854 <main+0x2c0>)
 80007f6:	f001 fbe2 	bl	8001fbe <HAL_UART_Transmit_IT>
		  break;
 80007fa:	e087      	b.n	800090c <main+0x378>
		  else if (RxBuffer[0] == 'x') // back
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <main+0x2c4>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b78      	cmp	r3, #120	; 0x78
 8000802:	f040 8083 	bne.w	800090c <main+0x378>
			  RxBuffer[0] = 0;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <main+0x2c4>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
			  State = 0;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <main+0x2b8>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
		  break;
 8000812:	e07b      	b.n	800090c <main+0x378>

	  case 4:
		  HAL_Delay(5);
 8000814:	2005      	movs	r0, #5
 8000816:	f000 fb55 	bl	8000ec4 <HAL_Delay>
		  HAL_UART_Transmit_IT(&huart2, BUTTON_Menu, strlen((char*) BUTTON_Menu));
 800081a:	4816      	ldr	r0, [pc, #88]	; (8000874 <main+0x2e0>)
 800081c:	f7ff fce0 	bl	80001e0 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29b      	uxth	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	4913      	ldr	r1, [pc, #76]	; (8000874 <main+0x2e0>)
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <main+0x2c0>)
 800082a:	f001 fbc8 	bl	8001fbe <HAL_UART_Transmit_IT>
		  State = 5;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <main+0x2b8>)
 8000830:	2205      	movs	r2, #5
 8000832:	701a      	strb	r2, [r3, #0]
		  break;
 8000834:	e06b      	b.n	800090e <main+0x37a>
 8000836:	bf00      	nop
 8000838:	20000760 	.word	0x20000760
 800083c:	2000071c 	.word	0x2000071c
 8000840:	2000071e 	.word	0x2000071e
 8000844:	20000720 	.word	0x20000720
 8000848:	40020000 	.word	0x40020000
 800084c:	2000071f 	.word	0x2000071f
 8000850:	20000000 	.word	0x20000000
 8000854:	200006ac 	.word	0x200006ac
 8000858:	200006f0 	.word	0x200006f0
 800085c:	200001f4 	.word	0x200001f4
 8000860:	2000071d 	.word	0x2000071d
 8000864:	080037f4 	.word	0x080037f4
 8000868:	20000724 	.word	0x20000724
 800086c:	200005e8 	.word	0x200005e8
 8000870:	200005dc 	.word	0x200005dc
 8000874:	200004b0 	.word	0x200004b0

	  case 5:
		  Button = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087c:	4824      	ldr	r0, [pc, #144]	; (8000910 <main+0x37c>)
 800087e:	f000 fe6d 	bl	800155c <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <main+0x380>)
 8000888:	701a      	strb	r2, [r3, #0]
		  if (Button == 1 && PastButton == 0)
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <main+0x380>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d111      	bne.n	80008b6 <main+0x322>
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <main+0x384>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10d      	bne.n	80008b6 <main+0x322>
		  {
			  HAL_UART_Transmit_IT(&huart2, UnPress, strlen((char*) UnPress));
 800089a:	4820      	ldr	r0, [pc, #128]	; (800091c <main+0x388>)
 800089c:	f7ff fca0 	bl	80001e0 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	491d      	ldr	r1, [pc, #116]	; (800091c <main+0x388>)
 80008a8:	481d      	ldr	r0, [pc, #116]	; (8000920 <main+0x38c>)
 80008aa:	f001 fb88 	bl	8001fbe <HAL_UART_Transmit_IT>
			  OnePress = 0;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <main+0x390>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e023      	b.n	80008fe <main+0x36a>
		  }
		  else if (Button == 0 && PastButton == 0)
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <main+0x380>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d115      	bne.n	80008ea <main+0x356>
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <main+0x384>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d111      	bne.n	80008ea <main+0x356>
		  {
			  if (!OnePress)
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <main+0x390>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d117      	bne.n	80008fe <main+0x36a>
			  {
				  HAL_UART_Transmit_IT(&huart2, Press, strlen((char*) Press));
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <main+0x394>)
 80008d0:	f7ff fc86 	bl	80001e0 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	4913      	ldr	r1, [pc, #76]	; (8000928 <main+0x394>)
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <main+0x38c>)
 80008de:	f001 fb6e 	bl	8001fbe <HAL_UART_Transmit_IT>
				  OnePress = 1;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <main+0x390>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
			  if (!OnePress)
 80008e8:	e009      	b.n	80008fe <main+0x36a>
			  }
		  }
		  else if (RxBuffer[0] == 'x')
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <main+0x398>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b78      	cmp	r3, #120	; 0x78
 80008f0:	d105      	bne.n	80008fe <main+0x36a>
		  {
			  RxBuffer[0] = 0;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <main+0x398>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
			  State = 0;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <main+0x39c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
		  }

		  PastButton = Button;
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <main+0x380>)
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <main+0x384>)
 8000904:	701a      	strb	r2, [r3, #0]
		  break;
 8000906:	e002      	b.n	800090e <main+0x37a>
	  	  break;
 8000908:	bf00      	nop
 800090a:	e64f      	b.n	80005ac <main+0x18>
		  break;
 800090c:	bf00      	nop
  {
 800090e:	e64d      	b.n	80005ac <main+0x18>
 8000910:	40020800 	.word	0x40020800
 8000914:	20000721 	.word	0x20000721
 8000918:	20000722 	.word	0x20000722
 800091c:	2000060c 	.word	0x2000060c
 8000920:	200006ac 	.word	0x200006ac
 8000924:	20000723 	.word	0x20000723
 8000928:	200005f8 	.word	0x200005f8
 800092c:	200006f0 	.word	0x200006f0
 8000930:	2000071f 	.word	0x2000071f

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	; 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	2230      	movs	r2, #48	; 0x30
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fad4 	bl	8002ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a27      	ldr	r2, [pc, #156]	; (8000a00 <SystemClock_Config+0xcc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a21      	ldr	r2, [pc, #132]	; (8000a04 <SystemClock_Config+0xd0>)
 800097e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2310      	movs	r3, #16
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009a4:	2310      	movs	r3, #16
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ae:	2304      	movs	r3, #4
 80009b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b2:	2304      	movs	r3, #4
 80009b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fe1a 	bl	80015f4 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009c6:	f000 f8e7 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2302      	movs	r3, #2
 80009d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2102      	movs	r1, #2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 f87c 	bl	8001ae4 <HAL_RCC_ClockConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009f2:	f000 f8d1 	bl	8000b98 <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	3750      	adds	r7, #80	; 0x50
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART2_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f001 fa70 	bl	8001f24 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f8a5 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200006ac 	.word	0x200006ac
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a2c      	ldr	r2, [pc, #176]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4812      	ldr	r0, [pc, #72]	; (8000b30 <MX_GPIO_Init+0xd4>)
 8000ae8:	f000 fd50 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_GPIO_Init+0xd8>)
 8000b04:	f000 fba6 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_GPIO_Init+0xd4>)
 8000b20:	f000 fb98 	bl	8001254 <HAL_GPIO_Init>

}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020800 	.word	0x40020800

08000b38 <UARTInterruptConfig>:

/* USER CODE BEGIN 4 */

void UARTInterruptConfig() {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4903      	ldr	r1, [pc, #12]	; (8000b4c <UARTInterruptConfig+0x14>)
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <UARTInterruptConfig+0x18>)
 8000b42:	f001 fa81 	bl	8002048 <HAL_UART_Receive_IT>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200006f0 	.word	0x200006f0
 8000b50:	200006ac 	.word	0x200006ac

08000b54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_UART_RxCpltCallback+0x34>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d10c      	bne.n	8000b7e <HAL_UART_RxCpltCallback+0x2a>
	{

		//(for string only) Add string stop symbol \0 to end string
		RxBuffer[2] = '\0';
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_UART_RxCpltCallback+0x38>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	709a      	strb	r2, [r3, #2]

		//return received char
		sprintf((char*)TxBuffer, "Received : %s\r\n" ,RxBuffer);
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_UART_RxCpltCallback+0x38>)
 8000b6c:	4908      	ldr	r1, [pc, #32]	; (8000b90 <HAL_UART_RxCpltCallback+0x3c>)
 8000b6e:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_UART_RxCpltCallback+0x40>)
 8000b70:	f002 f9c6 	bl	8002f00 <siprintf>
		//HAL_UART_Transmit_IT(&huart2, TxBuffer, strlen((char*)TxBuffer));

		HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	4905      	ldr	r1, [pc, #20]	; (8000b8c <HAL_UART_RxCpltCallback+0x38>)
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <HAL_UART_RxCpltCallback+0x34>)
 8000b7a:	f001 fa65 	bl	8002048 <HAL_UART_Receive_IT>

	}
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200006ac 	.word	0x200006ac
 8000b8c:	200006f0 	.word	0x200006f0
 8000b90:	08003800 	.word	0x08003800
 8000b94:	200006f4 	.word	0x200006f4

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be2:	2007      	movs	r0, #7
 8000be4:	f000 fa62 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <HAL_UART_MspInit+0x94>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d133      	bne.n	8000c7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_UART_MspInit+0x98>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_UART_MspInit+0x98>)
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0x98>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0x98>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <HAL_UART_MspInit+0x98>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_UART_MspInit+0x98>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <HAL_UART_MspInit+0x9c>)
 8000c6a:	f000 faf3 	bl	8001254 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2026      	movs	r0, #38	; 0x26
 8000c74:	f000 fa25 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c78:	2026      	movs	r0, #38	; 0x26
 8000c7a:	f000 fa3e 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f8d0 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <USART2_IRQHandler+0x10>)
 8000cee:	f001 f9db 	bl	80020a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200006ac 	.word	0x200006ac

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f002 f8b6 	bl	8002e9c <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20020000 	.word	0x20020000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	20000764 	.word	0x20000764
 8000d64:	20000780 	.word	0x20000780

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ffd7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f002 f875 	bl	8002ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fbe9 	bl	8000594 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000690 	.word	0x20000690
  ldr r2, =_sidata
 8000dd0:	0800386c 	.word	0x0800386c
  ldr r2, =_sbss
 8000dd4:	20000690 	.word	0x20000690
  ldr r4, =_ebss
 8000dd8:	2000077c 	.word	0x2000077c

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f94f 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fec6 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f967 	bl	8001116 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f92f 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000620 	.word	0x20000620
 8000e7c:	20000628 	.word	0x20000628
 8000e80:	20000624 	.word	0x20000624

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000628 	.word	0x20000628
 8000ea8:	20000768 	.word	0x20000768

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000768 	.word	0x20000768

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000628 	.word	0x20000628

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff3e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff31 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff feb6 	bl	8000eac <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d008      	beq.n	8001160 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e052      	b.n	8001206 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0216 	bic.w	r2, r2, #22
 800116e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800117e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <HAL_DMA_Abort+0x62>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0208 	bic.w	r2, r2, #8
 800119e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b0:	e013      	b.n	80011da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011b2:	f7ff fe7b 	bl	8000eac <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d90c      	bls.n	80011da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2220      	movs	r2, #32
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2203      	movs	r2, #3
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e015      	b.n	8001206 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e4      	bne.n	80011b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ec:	223f      	movs	r2, #63	; 0x3f
 80011ee:	409a      	lsls	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d004      	beq.n	800122c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e00c      	b.n	8001246 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2205      	movs	r2, #5
 8001230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e159      	b.n	8001524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8148 	bne.w	800151e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d005      	beq.n	80012a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d130      	bne.n	8001308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b03      	cmp	r3, #3
 8001312:	d017      	beq.n	8001344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80a2 	beq.w	800151e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b57      	ldr	r3, [pc, #348]	; (800153c <HAL_GPIO_Init+0x2e8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a56      	ldr	r2, [pc, #344]	; (800153c <HAL_GPIO_Init+0x2e8>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b54      	ldr	r3, [pc, #336]	; (800153c <HAL_GPIO_Init+0x2e8>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a52      	ldr	r2, [pc, #328]	; (8001540 <HAL_GPIO_Init+0x2ec>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a49      	ldr	r2, [pc, #292]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <HAL_GPIO_Init+0x202>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a48      	ldr	r2, [pc, #288]	; (8001548 <HAL_GPIO_Init+0x2f4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x1fe>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a47      	ldr	r2, [pc, #284]	; (800154c <HAL_GPIO_Init+0x2f8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x1fa>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a46      	ldr	r2, [pc, #280]	; (8001550 <HAL_GPIO_Init+0x2fc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x1f6>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a45      	ldr	r2, [pc, #276]	; (8001554 <HAL_GPIO_Init+0x300>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x1f2>
 8001442:	2304      	movs	r3, #4
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x204>
 8001446:	2307      	movs	r3, #7
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x204>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x204>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x204>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x204>
 8001456:	2300      	movs	r3, #0
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001468:	4935      	ldr	r1, [pc, #212]	; (8001540 <HAL_GPIO_Init+0x2ec>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_GPIO_Init+0x304>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149a:	4a2f      	ldr	r2, [pc, #188]	; (8001558 <HAL_GPIO_Init+0x304>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c4:	4a24      	ldr	r2, [pc, #144]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ee:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x304>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_GPIO_Init+0x304>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3301      	adds	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	f67f aea2 	bls.w	8001270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40013c00 	.word	0x40013c00

0800155c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d0:	887a      	ldrh	r2, [r7, #2]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	041a      	lsls	r2, r3, #16
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43d9      	mvns	r1, r3
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	400b      	ands	r3, r1
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e267      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d075      	beq.n	80016fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001612:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b04      	cmp	r3, #4
 800161c:	d00c      	beq.n	8001638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161e:	4b85      	ldr	r3, [pc, #532]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001626:	2b08      	cmp	r3, #8
 8001628:	d112      	bne.n	8001650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162a:	4b82      	ldr	r3, [pc, #520]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001636:	d10b      	bne.n	8001650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	4b7e      	ldr	r3, [pc, #504]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d05b      	beq.n	80016fc <HAL_RCC_OscConfig+0x108>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d157      	bne.n	80016fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e242      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x74>
 800165a:	4b76      	ldr	r3, [pc, #472]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a75      	ldr	r2, [pc, #468]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e01d      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x98>
 8001672:	4b70      	ldr	r3, [pc, #448]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6f      	ldr	r2, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b6d      	ldr	r3, [pc, #436]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6c      	ldr	r2, [pc, #432]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 800168c:	4b69      	ldr	r3, [pc, #420]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a68      	ldr	r2, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fbfe 	bl	8000eac <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fbfa 	bl	8000eac <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e207      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0xc0>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fbea 	bl	8000eac <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fbe6 	bl	8000eac <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1f3      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	4b51      	ldr	r3, [pc, #324]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0xe8>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d063      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170a:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800171e:	2b08      	cmp	r3, #8
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	4b44      	ldr	r3, [pc, #272]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x152>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e1c7      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4937      	ldr	r1, [pc, #220]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e03a      	b.n	80017d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001764:	4b34      	ldr	r3, [pc, #208]	; (8001838 <HAL_RCC_OscConfig+0x244>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fb9f 	bl	8000eac <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff fb9b 	bl	8000eac <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1a8      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4925      	ldr	r1, [pc, #148]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_RCC_OscConfig+0x244>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb7e 	bl	8000eac <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff fb7a 	bl	8000eac <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e187      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d036      	beq.n	800184c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d016      	beq.n	8001814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_RCC_OscConfig+0x248>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fb5e 	bl	8000eac <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff fb5a 	bl	8000eac <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e167      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_OscConfig+0x240>)
 8001808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x200>
 8001812:	e01b      	b.n	800184c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_OscConfig+0x248>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff fb47 	bl	8000eac <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	e00e      	b.n	8001840 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff fb43 	bl	8000eac <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d907      	bls.n	8001840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e150      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
 8001834:	40023800 	.word	0x40023800
 8001838:	42470000 	.word	0x42470000
 800183c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ea      	bne.n	8001822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8097 	beq.w	8001988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b81      	ldr	r3, [pc, #516]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b7d      	ldr	r3, [pc, #500]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a7c      	ldr	r2, [pc, #496]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b7a      	ldr	r3, [pc, #488]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b77      	ldr	r3, [pc, #476]	; (8001a68 <HAL_RCC_OscConfig+0x474>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b74      	ldr	r3, [pc, #464]	; (8001a68 <HAL_RCC_OscConfig+0x474>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a73      	ldr	r2, [pc, #460]	; (8001a68 <HAL_RCC_OscConfig+0x474>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fb03 	bl	8000eac <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff faff 	bl	8000eac <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e10c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <HAL_RCC_OscConfig+0x474>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x2ea>
 80018d0:	4b64      	ldr	r3, [pc, #400]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a63      	ldr	r2, [pc, #396]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x324>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x30c>
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	4a5e      	ldr	r2, [pc, #376]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6713      	str	r3, [r2, #112]	; 0x70
 80018f2:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	4a5b      	ldr	r2, [pc, #364]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6713      	str	r3, [r2, #112]	; 0x70
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x324>
 8001900:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a57      	ldr	r2, [pc, #348]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a54      	ldr	r2, [pc, #336]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff fac4 	bl	8000eac <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff fac0 	bl	8000eac <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0cb      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0ee      	beq.n	8001928 <HAL_RCC_OscConfig+0x334>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff faae 	bl	8000eac <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff faaa 	bl	8000eac <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0b5      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ee      	bne.n	8001954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	4a38      	ldr	r2, [pc, #224]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a1 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d05c      	beq.n	8001a58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d141      	bne.n	8001a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_RCC_OscConfig+0x478>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fa7e 	bl	8000eac <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fa7a 	bl	8000eac <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e087      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	491b      	ldr	r1, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x478>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fa53 	bl	8000eac <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff fa4f 	bl	8000eac <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e05c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x416>
 8001a28:	e054      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_RCC_OscConfig+0x478>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fa3c 	bl	8000eac <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff fa38 	bl	8000eac <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e045      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x444>
 8001a56:	e03d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e038      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x4ec>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d028      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d121      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d11a      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0cc      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d90c      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0b8      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	494d      	ldr	r1, [pc, #308]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d044      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d119      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e07f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e06f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e067      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4934      	ldr	r1, [pc, #208]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7ff f96a 	bl	8000eac <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7ff f966 	bl	8000eac <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e04f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d20c      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e032      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4916      	ldr	r1, [pc, #88]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c6a:	f000 f821 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f8ca 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	08003810 	.word	0x08003810
 8001ca8:	20000620 	.word	0x20000620
 8001cac:	20000624 	.word	0x20000624

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	b094      	sub	sp, #80	; 0x50
 8001cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	647b      	str	r3, [r7, #68]	; 0x44
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc8:	4b79      	ldr	r3, [pc, #484]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	f200 80e1 	bhi.w	8001e9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce2:	e0db      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ce8:	e0db      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cea:	4b73      	ldr	r3, [pc, #460]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cee:	e0d8      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfa:	4b6d      	ldr	r3, [pc, #436]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d22:	4622      	mov	r2, r4
 8001d24:	462b      	mov	r3, r5
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	0159      	lsls	r1, r3, #5
 8001d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d34:	0150      	lsls	r0, r2, #5
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	1a51      	subs	r1, r2, r1
 8001d3e:	6139      	str	r1, [r7, #16]
 8001d40:	4629      	mov	r1, r5
 8001d42:	eb63 0301 	sbc.w	r3, r3, r1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d54:	4659      	mov	r1, fp
 8001d56:	018b      	lsls	r3, r1, #6
 8001d58:	4651      	mov	r1, sl
 8001d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5e:	4651      	mov	r1, sl
 8001d60:	018a      	lsls	r2, r1, #6
 8001d62:	4651      	mov	r1, sl
 8001d64:	ebb2 0801 	subs.w	r8, r2, r1
 8001d68:	4659      	mov	r1, fp
 8001d6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d82:	4690      	mov	r8, r2
 8001d84:	4699      	mov	r9, r3
 8001d86:	4623      	mov	r3, r4
 8001d88:	eb18 0303 	adds.w	r3, r8, r3
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	462b      	mov	r3, r5
 8001d90:	eb49 0303 	adc.w	r3, r9, r3
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001da2:	4629      	mov	r1, r5
 8001da4:	024b      	lsls	r3, r1, #9
 8001da6:	4621      	mov	r1, r4
 8001da8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dac:	4621      	mov	r1, r4
 8001dae:	024a      	lsls	r2, r1, #9
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db6:	2200      	movs	r2, #0
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc0:	f7fe fa66 	bl	8000290 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dcc:	e058      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4611      	mov	r1, r2
 8001dda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de8:	4642      	mov	r2, r8
 8001dea:	464b      	mov	r3, r9
 8001dec:	f04f 0000 	mov.w	r0, #0
 8001df0:	f04f 0100 	mov.w	r1, #0
 8001df4:	0159      	lsls	r1, r3, #5
 8001df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfa:	0150      	lsls	r0, r2, #5
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4641      	mov	r1, r8
 8001e02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e06:	4649      	mov	r1, r9
 8001e08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e20:	ebb2 040a 	subs.w	r4, r2, sl
 8001e24:	eb63 050b 	sbc.w	r5, r3, fp
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	00eb      	lsls	r3, r5, #3
 8001e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e36:	00e2      	lsls	r2, r4, #3
 8001e38:	4614      	mov	r4, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	4643      	mov	r3, r8
 8001e3e:	18e3      	adds	r3, r4, r3
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	464b      	mov	r3, r9
 8001e44:	eb45 0303 	adc.w	r3, r5, r3
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e56:	4629      	mov	r1, r5
 8001e58:	028b      	lsls	r3, r1, #10
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e60:	4621      	mov	r1, r4
 8001e62:	028a      	lsls	r2, r1, #10
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	61fa      	str	r2, [r7, #28]
 8001e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e74:	f7fe fa0c 	bl	8000290 <__aeabi_uldivmod>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3750      	adds	r7, #80	; 0x50
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000620 	.word	0x20000620

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08003820 	.word	0x08003820

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f00:	f7ff ffdc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08003820 	.word	0x08003820

08001f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e03f      	b.n	8001fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fe52 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2224      	movs	r2, #36	; 0x24
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fd23 	bl	80029b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d130      	bne.n	800203a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_UART_Transmit_IT+0x26>
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e029      	b.n	800203c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_UART_Transmit_IT+0x38>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e022      	b.n	800203c <HAL_UART_Transmit_IT+0x7e>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	88fa      	ldrh	r2, [r7, #6]
 800200e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2221      	movs	r2, #33	; 0x21
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002034:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	4613      	mov	r3, r2
 8002054:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d11d      	bne.n	800209e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_UART_Receive_IT+0x26>
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e016      	b.n	80020a0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_UART_Receive_IT+0x38>
 800207c:	2302      	movs	r3, #2
 800207e:	e00f      	b.n	80020a0 <HAL_UART_Receive_IT+0x58>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	461a      	mov	r2, r3
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fab5 	bl	8002604 <UART_Start_Receive_IT>
 800209a:	4603      	mov	r3, r0
 800209c:	e000      	b.n	80020a0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800209e:	2302      	movs	r3, #2
  }
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0ba      	sub	sp, #232	; 0xe8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80020e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_UART_IRQHandler+0x66>
 80020fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fb99 	bl	800283e <UART_Receive_IT>
      return;
 800210c:	e256      	b.n	80025bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800210e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80de 	beq.w	80022d4 <HAL_UART_IRQHandler+0x22c>
 8002118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002128:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80d1 	beq.w	80022d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_UART_IRQHandler+0xae>
 800213e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_UART_IRQHandler+0xd2>
 8002162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f043 0202 	orr.w	r2, r3, #2
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800217a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_UART_IRQHandler+0xf6>
 8002186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f043 0204 	orr.w	r2, r3, #4
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800219e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d011      	beq.n	80021ce <HAL_UART_IRQHandler+0x126>
 80021aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80021b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0208 	orr.w	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 81ed 	beq.w	80025b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_UART_IRQHandler+0x14e>
 80021e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fb24 	bl	800283e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_UART_IRQHandler+0x17a>
 800221a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d04f      	beq.n	80022c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fa2c 	bl	8002680 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	2b40      	cmp	r3, #64	; 0x40
 8002234:	d141      	bne.n	80022ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3314      	adds	r3, #20
 800223c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002244:	e853 3f00 	ldrex	r3, [r3]
 8002248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800224c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3314      	adds	r3, #20
 800225e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002262:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800226e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002272:	e841 2300 	strex	r3, r2, [r1]
 8002276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800227a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1d9      	bne.n	8002236 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	2b00      	cmp	r3, #0
 8002288:	d013      	beq.n	80022b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	4a7d      	ldr	r2, [pc, #500]	; (8002484 <HAL_UART_IRQHandler+0x3dc>)
 8002290:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe ffb9 	bl	800120e <HAL_DMA_Abort_IT>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d016      	beq.n	80022d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022ac:	4610      	mov	r0, r2
 80022ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b0:	e00e      	b.n	80022d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f990 	bl	80025d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b8:	e00a      	b.n	80022d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f98c 	bl	80025d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c0:	e006      	b.n	80022d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f988 	bl	80025d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80022ce:	e170      	b.n	80025b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d0:	bf00      	nop
    return;
 80022d2:	e16e      	b.n	80025b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 814a 	bne.w	8002572 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8143 	beq.w	8002572 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 813c 	beq.w	8002572 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	f040 80b4 	bne.w	8002488 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800232c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8140 	beq.w	80025b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800233a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800233e:	429a      	cmp	r2, r3
 8002340:	f080 8139 	bcs.w	80025b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800234a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002356:	f000 8088 	beq.w	800246a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002368:	e853 3f00 	ldrex	r3, [r3]
 800236c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	330c      	adds	r3, #12
 8002382:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800238a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002392:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002396:	e841 2300 	strex	r3, r2, [r1]
 800239a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800239e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1d9      	bne.n	800235a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3314      	adds	r3, #20
 80023ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b0:	e853 3f00 	ldrex	r3, [r3]
 80023b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80023b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3314      	adds	r3, #20
 80023c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80023ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80023d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80023d6:	e841 2300 	strex	r3, r2, [r1]
 80023da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80023dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e1      	bne.n	80023a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3314      	adds	r3, #20
 80023e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80023f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	3314      	adds	r3, #20
 8002402:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002406:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800240c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800240e:	e841 2300 	strex	r3, r2, [r1]
 8002412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e3      	bne.n	80023e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	330c      	adds	r3, #12
 800242e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002432:	e853 3f00 	ldrex	r3, [r3]
 8002436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243a:	f023 0310 	bic.w	r3, r3, #16
 800243e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	330c      	adds	r3, #12
 8002448:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800244c:	65ba      	str	r2, [r7, #88]	; 0x58
 800244e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002454:	e841 2300 	strex	r3, r2, [r1]
 8002458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800245a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e3      	bne.n	8002428 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fe62 	bl	800112e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002472:	b29b      	uxth	r3, r3
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	b29b      	uxth	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f8b6 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002480:	e099      	b.n	80025b6 <HAL_UART_IRQHandler+0x50e>
 8002482:	bf00      	nop
 8002484:	08002747 	.word	0x08002747
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002490:	b29b      	uxth	r3, r3
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 808b 	beq.w	80025ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80024a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8086 	beq.w	80025ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80024be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80024d2:	647a      	str	r2, [r7, #68]	; 0x44
 80024d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80024d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024da:	e841 2300 	strex	r3, r2, [r1]
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80024e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1e3      	bne.n	80024ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3314      	adds	r3, #20
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	e853 3f00 	ldrex	r3, [r3]
 80024f4:	623b      	str	r3, [r7, #32]
   return(result);
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3314      	adds	r3, #20
 8002506:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800250a:	633a      	str	r2, [r7, #48]	; 0x30
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002512:	e841 2300 	strex	r3, r2, [r1]
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1e3      	bne.n	80024e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	e853 3f00 	ldrex	r3, [r3]
 800253a:	60fb      	str	r3, [r7, #12]
   return(result);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 0310 	bic.w	r3, r3, #16
 8002542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002550:	61fa      	str	r2, [r7, #28]
 8002552:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002554:	69b9      	ldr	r1, [r7, #24]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	e841 2300 	strex	r3, r2, [r1]
 800255c:	617b      	str	r3, [r7, #20]
   return(result);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1e3      	bne.n	800252c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f83e 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002570:	e023      	b.n	80025ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_UART_IRQHandler+0x4ea>
 800257e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8ef 	bl	800276e <UART_Transmit_IT>
    return;
 8002590:	e014      	b.n	80025bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <HAL_UART_IRQHandler+0x514>
 800259e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f92f 	bl	800280e <UART_EndTransmit_IT>
    return;
 80025b0:	e004      	b.n	80025bc <HAL_UART_IRQHandler+0x514>
    return;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <HAL_UART_IRQHandler+0x514>
      return;
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <HAL_UART_IRQHandler+0x514>
      return;
 80025ba:	bf00      	nop
  }
}
 80025bc:	37e8      	adds	r7, #232	; 0xe8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop

080025c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2222      	movs	r2, #34	; 0x22
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002650:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0220 	orr.w	r2, r2, #32
 8002670:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002680:	b480      	push	{r7}
 8002682:	b095      	sub	sp, #84	; 0x54
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	e853 3f00 	ldrex	r3, [r3]
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026a8:	643a      	str	r2, [r7, #64]	; 0x40
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026b0:	e841 2300 	strex	r3, r2, [r1]
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e5      	bne.n	8002688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3314      	adds	r3, #20
 80026c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	e853 3f00 	ldrex	r3, [r3]
 80026ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3314      	adds	r3, #20
 80026da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e4:	e841 2300 	strex	r3, r2, [r1]
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e5      	bne.n	80026bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d119      	bne.n	800272c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	e853 3f00 	ldrex	r3, [r3]
 8002706:	60bb      	str	r3, [r7, #8]
   return(result);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f023 0310 	bic.w	r3, r3, #16
 800270e:	647b      	str	r3, [r7, #68]	; 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	330c      	adds	r3, #12
 8002716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002718:	61ba      	str	r2, [r7, #24]
 800271a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271c:	6979      	ldr	r1, [r7, #20]
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	e841 2300 	strex	r3, r2, [r1]
 8002724:	613b      	str	r3, [r7, #16]
   return(result);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e5      	bne.n	80026f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
}
 800273a:	bf00      	nop
 800273c:	3754      	adds	r7, #84	; 0x54
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f7ff ff39 	bl	80025d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b21      	cmp	r3, #33	; 0x21
 8002780:	d13e      	bne.n	8002800 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	d114      	bne.n	80027b6 <UART_Transmit_IT+0x48>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d110      	bne.n	80027b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	1c9a      	adds	r2, r3, #2
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	621a      	str	r2, [r3, #32]
 80027b4:	e008      	b.n	80027c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	1c59      	adds	r1, r3, #1
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6211      	str	r1, [r2, #32]
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4619      	mov	r1, r3
 80027d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002824:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fec8 	bl	80025c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b08c      	sub	sp, #48	; 0x30
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b22      	cmp	r3, #34	; 0x22
 8002850:	f040 80ab 	bne.w	80029aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285c:	d117      	bne.n	800288e <UART_Receive_IT+0x50>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d113      	bne.n	800288e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287c:	b29a      	uxth	r2, r3
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	1c9a      	adds	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
 800288c:	e026      	b.n	80028dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d007      	beq.n	80028b2 <UART_Receive_IT+0x74>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <UART_Receive_IT+0x82>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e008      	b.n	80028d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4619      	mov	r1, r3
 80028ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d15a      	bne.n	80029a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0220 	bic.w	r2, r2, #32
 80028fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800290e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	2b01      	cmp	r3, #1
 800292e:	d135      	bne.n	800299c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	613b      	str	r3, [r7, #16]
   return(result);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f023 0310 	bic.w	r3, r3, #16
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330c      	adds	r3, #12
 8002954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002956:	623a      	str	r2, [r7, #32]
 8002958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295a:	69f9      	ldr	r1, [r7, #28]
 800295c:	6a3a      	ldr	r2, [r7, #32]
 800295e:	e841 2300 	strex	r3, r2, [r1]
 8002962:	61bb      	str	r3, [r7, #24]
   return(result);
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e5      	bne.n	8002936 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b10      	cmp	r3, #16
 8002976:	d10a      	bne.n	800298e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff fe29 	bl	80025ec <HAL_UARTEx_RxEventCallback>
 800299a:	e002      	b.n	80029a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7fe f8d9 	bl	8000b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e002      	b.n	80029ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e000      	b.n	80029ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
  }
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3730      	adds	r7, #48	; 0x30
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b8:	b0c0      	sub	sp, #256	; 0x100
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d0:	68d9      	ldr	r1, [r3, #12]
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	ea40 0301 	orr.w	r3, r0, r1
 80029dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a0c:	f021 010c 	bic.w	r1, r1, #12
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2e:	6999      	ldr	r1, [r3, #24]
 8002a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	ea40 0301 	orr.w	r3, r0, r1
 8002a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4b8f      	ldr	r3, [pc, #572]	; (8002c80 <UART_SetConfig+0x2cc>)
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d005      	beq.n	8002a54 <UART_SetConfig+0xa0>
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b8d      	ldr	r3, [pc, #564]	; (8002c84 <UART_SetConfig+0x2d0>)
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d104      	bne.n	8002a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a54:	f7ff fa52 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8002a58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a5c:	e003      	b.n	8002a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a5e:	f7ff fa39 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002a62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a70:	f040 810c 	bne.w	8002c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a86:	4622      	mov	r2, r4
 8002a88:	462b      	mov	r3, r5
 8002a8a:	1891      	adds	r1, r2, r2
 8002a8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a8e:	415b      	adcs	r3, r3
 8002a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a96:	4621      	mov	r1, r4
 8002a98:	eb12 0801 	adds.w	r8, r2, r1
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	eb43 0901 	adc.w	r9, r3, r1
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab6:	4690      	mov	r8, r2
 8002ab8:	4699      	mov	r9, r3
 8002aba:	4623      	mov	r3, r4
 8002abc:	eb18 0303 	adds.w	r3, r8, r3
 8002ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ac4:	462b      	mov	r3, r5
 8002ac6:	eb49 0303 	adc.w	r3, r9, r3
 8002aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ada:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	18db      	adds	r3, r3, r3
 8002ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ae8:	4613      	mov	r3, r2
 8002aea:	eb42 0303 	adc.w	r3, r2, r3
 8002aee:	657b      	str	r3, [r7, #84]	; 0x54
 8002af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002af8:	f7fd fbca 	bl	8000290 <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <UART_SetConfig+0x2d4>)
 8002b02:	fba3 2302 	umull	r2, r3, r3, r2
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	011c      	lsls	r4, r3, #4
 8002b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b1c:	4642      	mov	r2, r8
 8002b1e:	464b      	mov	r3, r9
 8002b20:	1891      	adds	r1, r2, r2
 8002b22:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b24:	415b      	adcs	r3, r3
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b2c:	4641      	mov	r1, r8
 8002b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b32:	4649      	mov	r1, r9
 8002b34:	eb43 0b01 	adc.w	fp, r3, r1
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b4c:	4692      	mov	sl, r2
 8002b4e:	469b      	mov	fp, r3
 8002b50:	4643      	mov	r3, r8
 8002b52:	eb1a 0303 	adds.w	r3, sl, r3
 8002b56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002b60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	18db      	adds	r3, r3, r3
 8002b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b7e:	4613      	mov	r3, r2
 8002b80:	eb42 0303 	adc.w	r3, r2, r3
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
 8002b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b8e:	f7fd fb7f 	bl	8000290 <__aeabi_uldivmod>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4611      	mov	r1, r2
 8002b98:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <UART_SetConfig+0x2d4>)
 8002b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2264      	movs	r2, #100	; 0x64
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	1acb      	subs	r3, r1, r3
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <UART_SetConfig+0x2d4>)
 8002bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bbc:	441c      	add	r4, r3
 8002bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	1891      	adds	r1, r2, r2
 8002bd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bd8:	415b      	adcs	r3, r3
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002be0:	4641      	mov	r1, r8
 8002be2:	1851      	adds	r1, r2, r1
 8002be4:	6339      	str	r1, [r7, #48]	; 0x30
 8002be6:	4649      	mov	r1, r9
 8002be8:	414b      	adcs	r3, r1
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	00cb      	lsls	r3, r1, #3
 8002bfc:	4651      	mov	r1, sl
 8002bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c02:	4651      	mov	r1, sl
 8002c04:	00ca      	lsls	r2, r1, #3
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	189b      	adds	r3, r3, r2
 8002c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c14:	464b      	mov	r3, r9
 8002c16:	460a      	mov	r2, r1
 8002c18:	eb42 0303 	adc.w	r3, r2, r3
 8002c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c34:	460b      	mov	r3, r1
 8002c36:	18db      	adds	r3, r3, r3
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	eb42 0303 	adc.w	r3, r2, r3
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c4a:	f7fd fb21 	bl	8000290 <__aeabi_uldivmod>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <UART_SetConfig+0x2d4>)
 8002c54:	fba3 1302 	umull	r1, r3, r3, r2
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	2164      	movs	r1, #100	; 0x64
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	3332      	adds	r3, #50	; 0x32
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <UART_SetConfig+0x2d4>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	f003 0207 	and.w	r2, r3, #7
 8002c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4422      	add	r2, r4
 8002c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c7c:	e105      	b.n	8002e8a <UART_SetConfig+0x4d6>
 8002c7e:	bf00      	nop
 8002c80:	40011000 	.word	0x40011000
 8002c84:	40011400 	.word	0x40011400
 8002c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c90:	2200      	movs	r2, #0
 8002c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c9e:	4642      	mov	r2, r8
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	1891      	adds	r1, r2, r2
 8002ca4:	6239      	str	r1, [r7, #32]
 8002ca6:	415b      	adcs	r3, r3
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8002caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cae:	4641      	mov	r1, r8
 8002cb0:	1854      	adds	r4, r2, r1
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	eb43 0501 	adc.w	r5, r3, r1
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	00eb      	lsls	r3, r5, #3
 8002cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc6:	00e2      	lsls	r2, r4, #3
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	4643      	mov	r3, r8
 8002cce:	18e3      	adds	r3, r4, r3
 8002cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	eb45 0303 	adc.w	r3, r5, r3
 8002cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	008b      	lsls	r3, r1, #2
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d04:	4621      	mov	r1, r4
 8002d06:	008a      	lsls	r2, r1, #2
 8002d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d0c:	f7fd fac0 	bl	8000290 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4b60      	ldr	r3, [pc, #384]	; (8002e98 <UART_SetConfig+0x4e4>)
 8002d16:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	011c      	lsls	r4, r3, #4
 8002d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d30:	4642      	mov	r2, r8
 8002d32:	464b      	mov	r3, r9
 8002d34:	1891      	adds	r1, r2, r2
 8002d36:	61b9      	str	r1, [r7, #24]
 8002d38:	415b      	adcs	r3, r3
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d40:	4641      	mov	r1, r8
 8002d42:	1851      	adds	r1, r2, r1
 8002d44:	6139      	str	r1, [r7, #16]
 8002d46:	4649      	mov	r1, r9
 8002d48:	414b      	adcs	r3, r1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d58:	4659      	mov	r1, fp
 8002d5a:	00cb      	lsls	r3, r1, #3
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d62:	4651      	mov	r1, sl
 8002d64:	00ca      	lsls	r2, r1, #3
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d74:	464b      	mov	r3, r9
 8002d76:	460a      	mov	r2, r1
 8002d78:	eb42 0303 	adc.w	r3, r2, r3
 8002d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d98:	4649      	mov	r1, r9
 8002d9a:	008b      	lsls	r3, r1, #2
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da2:	4641      	mov	r1, r8
 8002da4:	008a      	lsls	r2, r1, #2
 8002da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002daa:	f7fd fa71 	bl	8000290 <__aeabi_uldivmod>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <UART_SetConfig+0x4e4>)
 8002db4:	fba3 1302 	umull	r1, r3, r3, r2
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	2164      	movs	r1, #100	; 0x64
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	3332      	adds	r3, #50	; 0x32
 8002dc6:	4a34      	ldr	r2, [pc, #208]	; (8002e98 <UART_SetConfig+0x4e4>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd2:	441c      	add	r4, r3
 8002dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd8:	2200      	movs	r2, #0
 8002dda:	673b      	str	r3, [r7, #112]	; 0x70
 8002ddc:	677a      	str	r2, [r7, #116]	; 0x74
 8002dde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002de2:	4642      	mov	r2, r8
 8002de4:	464b      	mov	r3, r9
 8002de6:	1891      	adds	r1, r2, r2
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	415b      	adcs	r3, r3
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df2:	4641      	mov	r1, r8
 8002df4:	1851      	adds	r1, r2, r1
 8002df6:	6039      	str	r1, [r7, #0]
 8002df8:	4649      	mov	r1, r9
 8002dfa:	414b      	adcs	r3, r1
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e0a:	4659      	mov	r1, fp
 8002e0c:	00cb      	lsls	r3, r1, #3
 8002e0e:	4651      	mov	r1, sl
 8002e10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e14:	4651      	mov	r1, sl
 8002e16:	00ca      	lsls	r2, r1, #3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4642      	mov	r2, r8
 8002e20:	189b      	adds	r3, r3, r2
 8002e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e24:	464b      	mov	r3, r9
 8002e26:	460a      	mov	r2, r1
 8002e28:	eb42 0303 	adc.w	r3, r2, r3
 8002e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	663b      	str	r3, [r7, #96]	; 0x60
 8002e38:	667a      	str	r2, [r7, #100]	; 0x64
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e46:	4649      	mov	r1, r9
 8002e48:	008b      	lsls	r3, r1, #2
 8002e4a:	4641      	mov	r1, r8
 8002e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e50:	4641      	mov	r1, r8
 8002e52:	008a      	lsls	r2, r1, #2
 8002e54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e58:	f7fd fa1a 	bl	8000290 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <UART_SetConfig+0x4e4>)
 8002e62:	fba3 1302 	umull	r1, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2164      	movs	r1, #100	; 0x64
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	3332      	adds	r3, #50	; 0x32
 8002e74:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <UART_SetConfig+0x4e4>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	f003 020f 	and.w	r2, r3, #15
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4422      	add	r2, r4
 8002e88:	609a      	str	r2, [r3, #8]
}
 8002e8a:	bf00      	nop
 8002e8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e90:	46bd      	mov	sp, r7
 8002e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e96:	bf00      	nop
 8002e98:	51eb851f 	.word	0x51eb851f

08002e9c <__errno>:
 8002e9c:	4b01      	ldr	r3, [pc, #4]	; (8002ea4 <__errno+0x8>)
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	2000062c 	.word	0x2000062c

08002ea8 <__libc_init_array>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	4d0d      	ldr	r5, [pc, #52]	; (8002ee0 <__libc_init_array+0x38>)
 8002eac:	4c0d      	ldr	r4, [pc, #52]	; (8002ee4 <__libc_init_array+0x3c>)
 8002eae:	1b64      	subs	r4, r4, r5
 8002eb0:	10a4      	asrs	r4, r4, #2
 8002eb2:	2600      	movs	r6, #0
 8002eb4:	42a6      	cmp	r6, r4
 8002eb6:	d109      	bne.n	8002ecc <__libc_init_array+0x24>
 8002eb8:	4d0b      	ldr	r5, [pc, #44]	; (8002ee8 <__libc_init_array+0x40>)
 8002eba:	4c0c      	ldr	r4, [pc, #48]	; (8002eec <__libc_init_array+0x44>)
 8002ebc:	f000 fc8e 	bl	80037dc <_init>
 8002ec0:	1b64      	subs	r4, r4, r5
 8002ec2:	10a4      	asrs	r4, r4, #2
 8002ec4:	2600      	movs	r6, #0
 8002ec6:	42a6      	cmp	r6, r4
 8002ec8:	d105      	bne.n	8002ed6 <__libc_init_array+0x2e>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed0:	4798      	blx	r3
 8002ed2:	3601      	adds	r6, #1
 8002ed4:	e7ee      	b.n	8002eb4 <__libc_init_array+0xc>
 8002ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eda:	4798      	blx	r3
 8002edc:	3601      	adds	r6, #1
 8002ede:	e7f2      	b.n	8002ec6 <__libc_init_array+0x1e>
 8002ee0:	08003864 	.word	0x08003864
 8002ee4:	08003864 	.word	0x08003864
 8002ee8:	08003864 	.word	0x08003864
 8002eec:	08003868 	.word	0x08003868

08002ef0 <memset>:
 8002ef0:	4402      	add	r2, r0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d100      	bne.n	8002efa <memset+0xa>
 8002ef8:	4770      	bx	lr
 8002efa:	f803 1b01 	strb.w	r1, [r3], #1
 8002efe:	e7f9      	b.n	8002ef4 <memset+0x4>

08002f00 <siprintf>:
 8002f00:	b40e      	push	{r1, r2, r3}
 8002f02:	b500      	push	{lr}
 8002f04:	b09c      	sub	sp, #112	; 0x70
 8002f06:	ab1d      	add	r3, sp, #116	; 0x74
 8002f08:	9002      	str	r0, [sp, #8]
 8002f0a:	9006      	str	r0, [sp, #24]
 8002f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f10:	4809      	ldr	r0, [pc, #36]	; (8002f38 <siprintf+0x38>)
 8002f12:	9107      	str	r1, [sp, #28]
 8002f14:	9104      	str	r1, [sp, #16]
 8002f16:	4909      	ldr	r1, [pc, #36]	; (8002f3c <siprintf+0x3c>)
 8002f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f1c:	9105      	str	r1, [sp, #20]
 8002f1e:	6800      	ldr	r0, [r0, #0]
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	a902      	add	r1, sp, #8
 8002f24:	f000 f868 	bl	8002ff8 <_svfiprintf_r>
 8002f28:	9b02      	ldr	r3, [sp, #8]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	b01c      	add	sp, #112	; 0x70
 8002f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f34:	b003      	add	sp, #12
 8002f36:	4770      	bx	lr
 8002f38:	2000062c 	.word	0x2000062c
 8002f3c:	ffff0208 	.word	0xffff0208

08002f40 <__ssputs_r>:
 8002f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f44:	688e      	ldr	r6, [r1, #8]
 8002f46:	429e      	cmp	r6, r3
 8002f48:	4682      	mov	sl, r0
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	4690      	mov	r8, r2
 8002f4e:	461f      	mov	r7, r3
 8002f50:	d838      	bhi.n	8002fc4 <__ssputs_r+0x84>
 8002f52:	898a      	ldrh	r2, [r1, #12]
 8002f54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f58:	d032      	beq.n	8002fc0 <__ssputs_r+0x80>
 8002f5a:	6825      	ldr	r5, [r4, #0]
 8002f5c:	6909      	ldr	r1, [r1, #16]
 8002f5e:	eba5 0901 	sub.w	r9, r5, r1
 8002f62:	6965      	ldr	r5, [r4, #20]
 8002f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	444b      	add	r3, r9
 8002f70:	106d      	asrs	r5, r5, #1
 8002f72:	429d      	cmp	r5, r3
 8002f74:	bf38      	it	cc
 8002f76:	461d      	movcc	r5, r3
 8002f78:	0553      	lsls	r3, r2, #21
 8002f7a:	d531      	bpl.n	8002fe0 <__ssputs_r+0xa0>
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	f000 fb63 	bl	8003648 <_malloc_r>
 8002f82:	4606      	mov	r6, r0
 8002f84:	b950      	cbnz	r0, 8002f9c <__ssputs_r+0x5c>
 8002f86:	230c      	movs	r3, #12
 8002f88:	f8ca 3000 	str.w	r3, [sl]
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f92:	81a3      	strh	r3, [r4, #12]
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f9c:	6921      	ldr	r1, [r4, #16]
 8002f9e:	464a      	mov	r2, r9
 8002fa0:	f000 fabe 	bl	8003520 <memcpy>
 8002fa4:	89a3      	ldrh	r3, [r4, #12]
 8002fa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	6126      	str	r6, [r4, #16]
 8002fb2:	6165      	str	r5, [r4, #20]
 8002fb4:	444e      	add	r6, r9
 8002fb6:	eba5 0509 	sub.w	r5, r5, r9
 8002fba:	6026      	str	r6, [r4, #0]
 8002fbc:	60a5      	str	r5, [r4, #8]
 8002fbe:	463e      	mov	r6, r7
 8002fc0:	42be      	cmp	r6, r7
 8002fc2:	d900      	bls.n	8002fc6 <__ssputs_r+0x86>
 8002fc4:	463e      	mov	r6, r7
 8002fc6:	6820      	ldr	r0, [r4, #0]
 8002fc8:	4632      	mov	r2, r6
 8002fca:	4641      	mov	r1, r8
 8002fcc:	f000 fab6 	bl	800353c <memmove>
 8002fd0:	68a3      	ldr	r3, [r4, #8]
 8002fd2:	1b9b      	subs	r3, r3, r6
 8002fd4:	60a3      	str	r3, [r4, #8]
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	4433      	add	r3, r6
 8002fda:	6023      	str	r3, [r4, #0]
 8002fdc:	2000      	movs	r0, #0
 8002fde:	e7db      	b.n	8002f98 <__ssputs_r+0x58>
 8002fe0:	462a      	mov	r2, r5
 8002fe2:	f000 fba5 	bl	8003730 <_realloc_r>
 8002fe6:	4606      	mov	r6, r0
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d1e1      	bne.n	8002fb0 <__ssputs_r+0x70>
 8002fec:	6921      	ldr	r1, [r4, #16]
 8002fee:	4650      	mov	r0, sl
 8002ff0:	f000 fabe 	bl	8003570 <_free_r>
 8002ff4:	e7c7      	b.n	8002f86 <__ssputs_r+0x46>
	...

08002ff8 <_svfiprintf_r>:
 8002ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ffc:	4698      	mov	r8, r3
 8002ffe:	898b      	ldrh	r3, [r1, #12]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	b09d      	sub	sp, #116	; 0x74
 8003004:	4607      	mov	r7, r0
 8003006:	460d      	mov	r5, r1
 8003008:	4614      	mov	r4, r2
 800300a:	d50e      	bpl.n	800302a <_svfiprintf_r+0x32>
 800300c:	690b      	ldr	r3, [r1, #16]
 800300e:	b963      	cbnz	r3, 800302a <_svfiprintf_r+0x32>
 8003010:	2140      	movs	r1, #64	; 0x40
 8003012:	f000 fb19 	bl	8003648 <_malloc_r>
 8003016:	6028      	str	r0, [r5, #0]
 8003018:	6128      	str	r0, [r5, #16]
 800301a:	b920      	cbnz	r0, 8003026 <_svfiprintf_r+0x2e>
 800301c:	230c      	movs	r3, #12
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	e0d1      	b.n	80031ca <_svfiprintf_r+0x1d2>
 8003026:	2340      	movs	r3, #64	; 0x40
 8003028:	616b      	str	r3, [r5, #20]
 800302a:	2300      	movs	r3, #0
 800302c:	9309      	str	r3, [sp, #36]	; 0x24
 800302e:	2320      	movs	r3, #32
 8003030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003034:	f8cd 800c 	str.w	r8, [sp, #12]
 8003038:	2330      	movs	r3, #48	; 0x30
 800303a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031e4 <_svfiprintf_r+0x1ec>
 800303e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003042:	f04f 0901 	mov.w	r9, #1
 8003046:	4623      	mov	r3, r4
 8003048:	469a      	mov	sl, r3
 800304a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800304e:	b10a      	cbz	r2, 8003054 <_svfiprintf_r+0x5c>
 8003050:	2a25      	cmp	r2, #37	; 0x25
 8003052:	d1f9      	bne.n	8003048 <_svfiprintf_r+0x50>
 8003054:	ebba 0b04 	subs.w	fp, sl, r4
 8003058:	d00b      	beq.n	8003072 <_svfiprintf_r+0x7a>
 800305a:	465b      	mov	r3, fp
 800305c:	4622      	mov	r2, r4
 800305e:	4629      	mov	r1, r5
 8003060:	4638      	mov	r0, r7
 8003062:	f7ff ff6d 	bl	8002f40 <__ssputs_r>
 8003066:	3001      	adds	r0, #1
 8003068:	f000 80aa 	beq.w	80031c0 <_svfiprintf_r+0x1c8>
 800306c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800306e:	445a      	add	r2, fp
 8003070:	9209      	str	r2, [sp, #36]	; 0x24
 8003072:	f89a 3000 	ldrb.w	r3, [sl]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80a2 	beq.w	80031c0 <_svfiprintf_r+0x1c8>
 800307c:	2300      	movs	r3, #0
 800307e:	f04f 32ff 	mov.w	r2, #4294967295
 8003082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003086:	f10a 0a01 	add.w	sl, sl, #1
 800308a:	9304      	str	r3, [sp, #16]
 800308c:	9307      	str	r3, [sp, #28]
 800308e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003092:	931a      	str	r3, [sp, #104]	; 0x68
 8003094:	4654      	mov	r4, sl
 8003096:	2205      	movs	r2, #5
 8003098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800309c:	4851      	ldr	r0, [pc, #324]	; (80031e4 <_svfiprintf_r+0x1ec>)
 800309e:	f7fd f8a7 	bl	80001f0 <memchr>
 80030a2:	9a04      	ldr	r2, [sp, #16]
 80030a4:	b9d8      	cbnz	r0, 80030de <_svfiprintf_r+0xe6>
 80030a6:	06d0      	lsls	r0, r2, #27
 80030a8:	bf44      	itt	mi
 80030aa:	2320      	movmi	r3, #32
 80030ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030b0:	0711      	lsls	r1, r2, #28
 80030b2:	bf44      	itt	mi
 80030b4:	232b      	movmi	r3, #43	; 0x2b
 80030b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030ba:	f89a 3000 	ldrb.w	r3, [sl]
 80030be:	2b2a      	cmp	r3, #42	; 0x2a
 80030c0:	d015      	beq.n	80030ee <_svfiprintf_r+0xf6>
 80030c2:	9a07      	ldr	r2, [sp, #28]
 80030c4:	4654      	mov	r4, sl
 80030c6:	2000      	movs	r0, #0
 80030c8:	f04f 0c0a 	mov.w	ip, #10
 80030cc:	4621      	mov	r1, r4
 80030ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030d2:	3b30      	subs	r3, #48	; 0x30
 80030d4:	2b09      	cmp	r3, #9
 80030d6:	d94e      	bls.n	8003176 <_svfiprintf_r+0x17e>
 80030d8:	b1b0      	cbz	r0, 8003108 <_svfiprintf_r+0x110>
 80030da:	9207      	str	r2, [sp, #28]
 80030dc:	e014      	b.n	8003108 <_svfiprintf_r+0x110>
 80030de:	eba0 0308 	sub.w	r3, r0, r8
 80030e2:	fa09 f303 	lsl.w	r3, r9, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	9304      	str	r3, [sp, #16]
 80030ea:	46a2      	mov	sl, r4
 80030ec:	e7d2      	b.n	8003094 <_svfiprintf_r+0x9c>
 80030ee:	9b03      	ldr	r3, [sp, #12]
 80030f0:	1d19      	adds	r1, r3, #4
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	9103      	str	r1, [sp, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bfbb      	ittet	lt
 80030fa:	425b      	neglt	r3, r3
 80030fc:	f042 0202 	orrlt.w	r2, r2, #2
 8003100:	9307      	strge	r3, [sp, #28]
 8003102:	9307      	strlt	r3, [sp, #28]
 8003104:	bfb8      	it	lt
 8003106:	9204      	strlt	r2, [sp, #16]
 8003108:	7823      	ldrb	r3, [r4, #0]
 800310a:	2b2e      	cmp	r3, #46	; 0x2e
 800310c:	d10c      	bne.n	8003128 <_svfiprintf_r+0x130>
 800310e:	7863      	ldrb	r3, [r4, #1]
 8003110:	2b2a      	cmp	r3, #42	; 0x2a
 8003112:	d135      	bne.n	8003180 <_svfiprintf_r+0x188>
 8003114:	9b03      	ldr	r3, [sp, #12]
 8003116:	1d1a      	adds	r2, r3, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	9203      	str	r2, [sp, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	bfb8      	it	lt
 8003120:	f04f 33ff 	movlt.w	r3, #4294967295
 8003124:	3402      	adds	r4, #2
 8003126:	9305      	str	r3, [sp, #20]
 8003128:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80031f4 <_svfiprintf_r+0x1fc>
 800312c:	7821      	ldrb	r1, [r4, #0]
 800312e:	2203      	movs	r2, #3
 8003130:	4650      	mov	r0, sl
 8003132:	f7fd f85d 	bl	80001f0 <memchr>
 8003136:	b140      	cbz	r0, 800314a <_svfiprintf_r+0x152>
 8003138:	2340      	movs	r3, #64	; 0x40
 800313a:	eba0 000a 	sub.w	r0, r0, sl
 800313e:	fa03 f000 	lsl.w	r0, r3, r0
 8003142:	9b04      	ldr	r3, [sp, #16]
 8003144:	4303      	orrs	r3, r0
 8003146:	3401      	adds	r4, #1
 8003148:	9304      	str	r3, [sp, #16]
 800314a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800314e:	4826      	ldr	r0, [pc, #152]	; (80031e8 <_svfiprintf_r+0x1f0>)
 8003150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003154:	2206      	movs	r2, #6
 8003156:	f7fd f84b 	bl	80001f0 <memchr>
 800315a:	2800      	cmp	r0, #0
 800315c:	d038      	beq.n	80031d0 <_svfiprintf_r+0x1d8>
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <_svfiprintf_r+0x1f4>)
 8003160:	bb1b      	cbnz	r3, 80031aa <_svfiprintf_r+0x1b2>
 8003162:	9b03      	ldr	r3, [sp, #12]
 8003164:	3307      	adds	r3, #7
 8003166:	f023 0307 	bic.w	r3, r3, #7
 800316a:	3308      	adds	r3, #8
 800316c:	9303      	str	r3, [sp, #12]
 800316e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003170:	4433      	add	r3, r6
 8003172:	9309      	str	r3, [sp, #36]	; 0x24
 8003174:	e767      	b.n	8003046 <_svfiprintf_r+0x4e>
 8003176:	fb0c 3202 	mla	r2, ip, r2, r3
 800317a:	460c      	mov	r4, r1
 800317c:	2001      	movs	r0, #1
 800317e:	e7a5      	b.n	80030cc <_svfiprintf_r+0xd4>
 8003180:	2300      	movs	r3, #0
 8003182:	3401      	adds	r4, #1
 8003184:	9305      	str	r3, [sp, #20]
 8003186:	4619      	mov	r1, r3
 8003188:	f04f 0c0a 	mov.w	ip, #10
 800318c:	4620      	mov	r0, r4
 800318e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003192:	3a30      	subs	r2, #48	; 0x30
 8003194:	2a09      	cmp	r2, #9
 8003196:	d903      	bls.n	80031a0 <_svfiprintf_r+0x1a8>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0c5      	beq.n	8003128 <_svfiprintf_r+0x130>
 800319c:	9105      	str	r1, [sp, #20]
 800319e:	e7c3      	b.n	8003128 <_svfiprintf_r+0x130>
 80031a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80031a4:	4604      	mov	r4, r0
 80031a6:	2301      	movs	r3, #1
 80031a8:	e7f0      	b.n	800318c <_svfiprintf_r+0x194>
 80031aa:	ab03      	add	r3, sp, #12
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	462a      	mov	r2, r5
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <_svfiprintf_r+0x1f8>)
 80031b2:	a904      	add	r1, sp, #16
 80031b4:	4638      	mov	r0, r7
 80031b6:	f3af 8000 	nop.w
 80031ba:	1c42      	adds	r2, r0, #1
 80031bc:	4606      	mov	r6, r0
 80031be:	d1d6      	bne.n	800316e <_svfiprintf_r+0x176>
 80031c0:	89ab      	ldrh	r3, [r5, #12]
 80031c2:	065b      	lsls	r3, r3, #25
 80031c4:	f53f af2c 	bmi.w	8003020 <_svfiprintf_r+0x28>
 80031c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031ca:	b01d      	add	sp, #116	; 0x74
 80031cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d0:	ab03      	add	r3, sp, #12
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	462a      	mov	r2, r5
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <_svfiprintf_r+0x1f8>)
 80031d8:	a904      	add	r1, sp, #16
 80031da:	4638      	mov	r0, r7
 80031dc:	f000 f87a 	bl	80032d4 <_printf_i>
 80031e0:	e7eb      	b.n	80031ba <_svfiprintf_r+0x1c2>
 80031e2:	bf00      	nop
 80031e4:	08003828 	.word	0x08003828
 80031e8:	08003832 	.word	0x08003832
 80031ec:	00000000 	.word	0x00000000
 80031f0:	08002f41 	.word	0x08002f41
 80031f4:	0800382e 	.word	0x0800382e

080031f8 <_printf_common>:
 80031f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031fc:	4616      	mov	r6, r2
 80031fe:	4699      	mov	r9, r3
 8003200:	688a      	ldr	r2, [r1, #8]
 8003202:	690b      	ldr	r3, [r1, #16]
 8003204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003208:	4293      	cmp	r3, r2
 800320a:	bfb8      	it	lt
 800320c:	4613      	movlt	r3, r2
 800320e:	6033      	str	r3, [r6, #0]
 8003210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003214:	4607      	mov	r7, r0
 8003216:	460c      	mov	r4, r1
 8003218:	b10a      	cbz	r2, 800321e <_printf_common+0x26>
 800321a:	3301      	adds	r3, #1
 800321c:	6033      	str	r3, [r6, #0]
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	0699      	lsls	r1, r3, #26
 8003222:	bf42      	ittt	mi
 8003224:	6833      	ldrmi	r3, [r6, #0]
 8003226:	3302      	addmi	r3, #2
 8003228:	6033      	strmi	r3, [r6, #0]
 800322a:	6825      	ldr	r5, [r4, #0]
 800322c:	f015 0506 	ands.w	r5, r5, #6
 8003230:	d106      	bne.n	8003240 <_printf_common+0x48>
 8003232:	f104 0a19 	add.w	sl, r4, #25
 8003236:	68e3      	ldr	r3, [r4, #12]
 8003238:	6832      	ldr	r2, [r6, #0]
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	42ab      	cmp	r3, r5
 800323e:	dc26      	bgt.n	800328e <_printf_common+0x96>
 8003240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003244:	1e13      	subs	r3, r2, #0
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	bf18      	it	ne
 800324a:	2301      	movne	r3, #1
 800324c:	0692      	lsls	r2, r2, #26
 800324e:	d42b      	bmi.n	80032a8 <_printf_common+0xb0>
 8003250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003254:	4649      	mov	r1, r9
 8003256:	4638      	mov	r0, r7
 8003258:	47c0      	blx	r8
 800325a:	3001      	adds	r0, #1
 800325c:	d01e      	beq.n	800329c <_printf_common+0xa4>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	68e5      	ldr	r5, [r4, #12]
 8003262:	6832      	ldr	r2, [r6, #0]
 8003264:	f003 0306 	and.w	r3, r3, #6
 8003268:	2b04      	cmp	r3, #4
 800326a:	bf08      	it	eq
 800326c:	1aad      	subeq	r5, r5, r2
 800326e:	68a3      	ldr	r3, [r4, #8]
 8003270:	6922      	ldr	r2, [r4, #16]
 8003272:	bf0c      	ite	eq
 8003274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003278:	2500      	movne	r5, #0
 800327a:	4293      	cmp	r3, r2
 800327c:	bfc4      	itt	gt
 800327e:	1a9b      	subgt	r3, r3, r2
 8003280:	18ed      	addgt	r5, r5, r3
 8003282:	2600      	movs	r6, #0
 8003284:	341a      	adds	r4, #26
 8003286:	42b5      	cmp	r5, r6
 8003288:	d11a      	bne.n	80032c0 <_printf_common+0xc8>
 800328a:	2000      	movs	r0, #0
 800328c:	e008      	b.n	80032a0 <_printf_common+0xa8>
 800328e:	2301      	movs	r3, #1
 8003290:	4652      	mov	r2, sl
 8003292:	4649      	mov	r1, r9
 8003294:	4638      	mov	r0, r7
 8003296:	47c0      	blx	r8
 8003298:	3001      	adds	r0, #1
 800329a:	d103      	bne.n	80032a4 <_printf_common+0xac>
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032a4:	3501      	adds	r5, #1
 80032a6:	e7c6      	b.n	8003236 <_printf_common+0x3e>
 80032a8:	18e1      	adds	r1, r4, r3
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	2030      	movs	r0, #48	; 0x30
 80032ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032b2:	4422      	add	r2, r4
 80032b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032bc:	3302      	adds	r3, #2
 80032be:	e7c7      	b.n	8003250 <_printf_common+0x58>
 80032c0:	2301      	movs	r3, #1
 80032c2:	4622      	mov	r2, r4
 80032c4:	4649      	mov	r1, r9
 80032c6:	4638      	mov	r0, r7
 80032c8:	47c0      	blx	r8
 80032ca:	3001      	adds	r0, #1
 80032cc:	d0e6      	beq.n	800329c <_printf_common+0xa4>
 80032ce:	3601      	adds	r6, #1
 80032d0:	e7d9      	b.n	8003286 <_printf_common+0x8e>
	...

080032d4 <_printf_i>:
 80032d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032d8:	7e0f      	ldrb	r7, [r1, #24]
 80032da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032dc:	2f78      	cmp	r7, #120	; 0x78
 80032de:	4691      	mov	r9, r2
 80032e0:	4680      	mov	r8, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	469a      	mov	sl, r3
 80032e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032ea:	d807      	bhi.n	80032fc <_printf_i+0x28>
 80032ec:	2f62      	cmp	r7, #98	; 0x62
 80032ee:	d80a      	bhi.n	8003306 <_printf_i+0x32>
 80032f0:	2f00      	cmp	r7, #0
 80032f2:	f000 80d8 	beq.w	80034a6 <_printf_i+0x1d2>
 80032f6:	2f58      	cmp	r7, #88	; 0x58
 80032f8:	f000 80a3 	beq.w	8003442 <_printf_i+0x16e>
 80032fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003304:	e03a      	b.n	800337c <_printf_i+0xa8>
 8003306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800330a:	2b15      	cmp	r3, #21
 800330c:	d8f6      	bhi.n	80032fc <_printf_i+0x28>
 800330e:	a101      	add	r1, pc, #4	; (adr r1, 8003314 <_printf_i+0x40>)
 8003310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003314:	0800336d 	.word	0x0800336d
 8003318:	08003381 	.word	0x08003381
 800331c:	080032fd 	.word	0x080032fd
 8003320:	080032fd 	.word	0x080032fd
 8003324:	080032fd 	.word	0x080032fd
 8003328:	080032fd 	.word	0x080032fd
 800332c:	08003381 	.word	0x08003381
 8003330:	080032fd 	.word	0x080032fd
 8003334:	080032fd 	.word	0x080032fd
 8003338:	080032fd 	.word	0x080032fd
 800333c:	080032fd 	.word	0x080032fd
 8003340:	0800348d 	.word	0x0800348d
 8003344:	080033b1 	.word	0x080033b1
 8003348:	0800346f 	.word	0x0800346f
 800334c:	080032fd 	.word	0x080032fd
 8003350:	080032fd 	.word	0x080032fd
 8003354:	080034af 	.word	0x080034af
 8003358:	080032fd 	.word	0x080032fd
 800335c:	080033b1 	.word	0x080033b1
 8003360:	080032fd 	.word	0x080032fd
 8003364:	080032fd 	.word	0x080032fd
 8003368:	08003477 	.word	0x08003477
 800336c:	682b      	ldr	r3, [r5, #0]
 800336e:	1d1a      	adds	r2, r3, #4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	602a      	str	r2, [r5, #0]
 8003374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800337c:	2301      	movs	r3, #1
 800337e:	e0a3      	b.n	80034c8 <_printf_i+0x1f4>
 8003380:	6820      	ldr	r0, [r4, #0]
 8003382:	6829      	ldr	r1, [r5, #0]
 8003384:	0606      	lsls	r6, r0, #24
 8003386:	f101 0304 	add.w	r3, r1, #4
 800338a:	d50a      	bpl.n	80033a2 <_printf_i+0xce>
 800338c:	680e      	ldr	r6, [r1, #0]
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	2e00      	cmp	r6, #0
 8003392:	da03      	bge.n	800339c <_printf_i+0xc8>
 8003394:	232d      	movs	r3, #45	; 0x2d
 8003396:	4276      	negs	r6, r6
 8003398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800339c:	485e      	ldr	r0, [pc, #376]	; (8003518 <_printf_i+0x244>)
 800339e:	230a      	movs	r3, #10
 80033a0:	e019      	b.n	80033d6 <_printf_i+0x102>
 80033a2:	680e      	ldr	r6, [r1, #0]
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033aa:	bf18      	it	ne
 80033ac:	b236      	sxthne	r6, r6
 80033ae:	e7ef      	b.n	8003390 <_printf_i+0xbc>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	6820      	ldr	r0, [r4, #0]
 80033b4:	1d19      	adds	r1, r3, #4
 80033b6:	6029      	str	r1, [r5, #0]
 80033b8:	0601      	lsls	r1, r0, #24
 80033ba:	d501      	bpl.n	80033c0 <_printf_i+0xec>
 80033bc:	681e      	ldr	r6, [r3, #0]
 80033be:	e002      	b.n	80033c6 <_printf_i+0xf2>
 80033c0:	0646      	lsls	r6, r0, #25
 80033c2:	d5fb      	bpl.n	80033bc <_printf_i+0xe8>
 80033c4:	881e      	ldrh	r6, [r3, #0]
 80033c6:	4854      	ldr	r0, [pc, #336]	; (8003518 <_printf_i+0x244>)
 80033c8:	2f6f      	cmp	r7, #111	; 0x6f
 80033ca:	bf0c      	ite	eq
 80033cc:	2308      	moveq	r3, #8
 80033ce:	230a      	movne	r3, #10
 80033d0:	2100      	movs	r1, #0
 80033d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033d6:	6865      	ldr	r5, [r4, #4]
 80033d8:	60a5      	str	r5, [r4, #8]
 80033da:	2d00      	cmp	r5, #0
 80033dc:	bfa2      	ittt	ge
 80033de:	6821      	ldrge	r1, [r4, #0]
 80033e0:	f021 0104 	bicge.w	r1, r1, #4
 80033e4:	6021      	strge	r1, [r4, #0]
 80033e6:	b90e      	cbnz	r6, 80033ec <_printf_i+0x118>
 80033e8:	2d00      	cmp	r5, #0
 80033ea:	d04d      	beq.n	8003488 <_printf_i+0x1b4>
 80033ec:	4615      	mov	r5, r2
 80033ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80033f2:	fb03 6711 	mls	r7, r3, r1, r6
 80033f6:	5dc7      	ldrb	r7, [r0, r7]
 80033f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033fc:	4637      	mov	r7, r6
 80033fe:	42bb      	cmp	r3, r7
 8003400:	460e      	mov	r6, r1
 8003402:	d9f4      	bls.n	80033ee <_printf_i+0x11a>
 8003404:	2b08      	cmp	r3, #8
 8003406:	d10b      	bne.n	8003420 <_printf_i+0x14c>
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	07de      	lsls	r6, r3, #31
 800340c:	d508      	bpl.n	8003420 <_printf_i+0x14c>
 800340e:	6923      	ldr	r3, [r4, #16]
 8003410:	6861      	ldr	r1, [r4, #4]
 8003412:	4299      	cmp	r1, r3
 8003414:	bfde      	ittt	le
 8003416:	2330      	movle	r3, #48	; 0x30
 8003418:	f805 3c01 	strble.w	r3, [r5, #-1]
 800341c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003420:	1b52      	subs	r2, r2, r5
 8003422:	6122      	str	r2, [r4, #16]
 8003424:	f8cd a000 	str.w	sl, [sp]
 8003428:	464b      	mov	r3, r9
 800342a:	aa03      	add	r2, sp, #12
 800342c:	4621      	mov	r1, r4
 800342e:	4640      	mov	r0, r8
 8003430:	f7ff fee2 	bl	80031f8 <_printf_common>
 8003434:	3001      	adds	r0, #1
 8003436:	d14c      	bne.n	80034d2 <_printf_i+0x1fe>
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	b004      	add	sp, #16
 800343e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003442:	4835      	ldr	r0, [pc, #212]	; (8003518 <_printf_i+0x244>)
 8003444:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003448:	6829      	ldr	r1, [r5, #0]
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003450:	6029      	str	r1, [r5, #0]
 8003452:	061d      	lsls	r5, r3, #24
 8003454:	d514      	bpl.n	8003480 <_printf_i+0x1ac>
 8003456:	07df      	lsls	r7, r3, #31
 8003458:	bf44      	itt	mi
 800345a:	f043 0320 	orrmi.w	r3, r3, #32
 800345e:	6023      	strmi	r3, [r4, #0]
 8003460:	b91e      	cbnz	r6, 800346a <_printf_i+0x196>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	f023 0320 	bic.w	r3, r3, #32
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	2310      	movs	r3, #16
 800346c:	e7b0      	b.n	80033d0 <_printf_i+0xfc>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	f043 0320 	orr.w	r3, r3, #32
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	2378      	movs	r3, #120	; 0x78
 8003478:	4828      	ldr	r0, [pc, #160]	; (800351c <_printf_i+0x248>)
 800347a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800347e:	e7e3      	b.n	8003448 <_printf_i+0x174>
 8003480:	0659      	lsls	r1, r3, #25
 8003482:	bf48      	it	mi
 8003484:	b2b6      	uxthmi	r6, r6
 8003486:	e7e6      	b.n	8003456 <_printf_i+0x182>
 8003488:	4615      	mov	r5, r2
 800348a:	e7bb      	b.n	8003404 <_printf_i+0x130>
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	6826      	ldr	r6, [r4, #0]
 8003490:	6961      	ldr	r1, [r4, #20]
 8003492:	1d18      	adds	r0, r3, #4
 8003494:	6028      	str	r0, [r5, #0]
 8003496:	0635      	lsls	r5, r6, #24
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	d501      	bpl.n	80034a0 <_printf_i+0x1cc>
 800349c:	6019      	str	r1, [r3, #0]
 800349e:	e002      	b.n	80034a6 <_printf_i+0x1d2>
 80034a0:	0670      	lsls	r0, r6, #25
 80034a2:	d5fb      	bpl.n	800349c <_printf_i+0x1c8>
 80034a4:	8019      	strh	r1, [r3, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	6123      	str	r3, [r4, #16]
 80034aa:	4615      	mov	r5, r2
 80034ac:	e7ba      	b.n	8003424 <_printf_i+0x150>
 80034ae:	682b      	ldr	r3, [r5, #0]
 80034b0:	1d1a      	adds	r2, r3, #4
 80034b2:	602a      	str	r2, [r5, #0]
 80034b4:	681d      	ldr	r5, [r3, #0]
 80034b6:	6862      	ldr	r2, [r4, #4]
 80034b8:	2100      	movs	r1, #0
 80034ba:	4628      	mov	r0, r5
 80034bc:	f7fc fe98 	bl	80001f0 <memchr>
 80034c0:	b108      	cbz	r0, 80034c6 <_printf_i+0x1f2>
 80034c2:	1b40      	subs	r0, r0, r5
 80034c4:	6060      	str	r0, [r4, #4]
 80034c6:	6863      	ldr	r3, [r4, #4]
 80034c8:	6123      	str	r3, [r4, #16]
 80034ca:	2300      	movs	r3, #0
 80034cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034d0:	e7a8      	b.n	8003424 <_printf_i+0x150>
 80034d2:	6923      	ldr	r3, [r4, #16]
 80034d4:	462a      	mov	r2, r5
 80034d6:	4649      	mov	r1, r9
 80034d8:	4640      	mov	r0, r8
 80034da:	47d0      	blx	sl
 80034dc:	3001      	adds	r0, #1
 80034de:	d0ab      	beq.n	8003438 <_printf_i+0x164>
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	079b      	lsls	r3, r3, #30
 80034e4:	d413      	bmi.n	800350e <_printf_i+0x23a>
 80034e6:	68e0      	ldr	r0, [r4, #12]
 80034e8:	9b03      	ldr	r3, [sp, #12]
 80034ea:	4298      	cmp	r0, r3
 80034ec:	bfb8      	it	lt
 80034ee:	4618      	movlt	r0, r3
 80034f0:	e7a4      	b.n	800343c <_printf_i+0x168>
 80034f2:	2301      	movs	r3, #1
 80034f4:	4632      	mov	r2, r6
 80034f6:	4649      	mov	r1, r9
 80034f8:	4640      	mov	r0, r8
 80034fa:	47d0      	blx	sl
 80034fc:	3001      	adds	r0, #1
 80034fe:	d09b      	beq.n	8003438 <_printf_i+0x164>
 8003500:	3501      	adds	r5, #1
 8003502:	68e3      	ldr	r3, [r4, #12]
 8003504:	9903      	ldr	r1, [sp, #12]
 8003506:	1a5b      	subs	r3, r3, r1
 8003508:	42ab      	cmp	r3, r5
 800350a:	dcf2      	bgt.n	80034f2 <_printf_i+0x21e>
 800350c:	e7eb      	b.n	80034e6 <_printf_i+0x212>
 800350e:	2500      	movs	r5, #0
 8003510:	f104 0619 	add.w	r6, r4, #25
 8003514:	e7f5      	b.n	8003502 <_printf_i+0x22e>
 8003516:	bf00      	nop
 8003518:	08003839 	.word	0x08003839
 800351c:	0800384a 	.word	0x0800384a

08003520 <memcpy>:
 8003520:	440a      	add	r2, r1
 8003522:	4291      	cmp	r1, r2
 8003524:	f100 33ff 	add.w	r3, r0, #4294967295
 8003528:	d100      	bne.n	800352c <memcpy+0xc>
 800352a:	4770      	bx	lr
 800352c:	b510      	push	{r4, lr}
 800352e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003536:	4291      	cmp	r1, r2
 8003538:	d1f9      	bne.n	800352e <memcpy+0xe>
 800353a:	bd10      	pop	{r4, pc}

0800353c <memmove>:
 800353c:	4288      	cmp	r0, r1
 800353e:	b510      	push	{r4, lr}
 8003540:	eb01 0402 	add.w	r4, r1, r2
 8003544:	d902      	bls.n	800354c <memmove+0x10>
 8003546:	4284      	cmp	r4, r0
 8003548:	4623      	mov	r3, r4
 800354a:	d807      	bhi.n	800355c <memmove+0x20>
 800354c:	1e43      	subs	r3, r0, #1
 800354e:	42a1      	cmp	r1, r4
 8003550:	d008      	beq.n	8003564 <memmove+0x28>
 8003552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800355a:	e7f8      	b.n	800354e <memmove+0x12>
 800355c:	4402      	add	r2, r0
 800355e:	4601      	mov	r1, r0
 8003560:	428a      	cmp	r2, r1
 8003562:	d100      	bne.n	8003566 <memmove+0x2a>
 8003564:	bd10      	pop	{r4, pc}
 8003566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800356a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800356e:	e7f7      	b.n	8003560 <memmove+0x24>

08003570 <_free_r>:
 8003570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003572:	2900      	cmp	r1, #0
 8003574:	d044      	beq.n	8003600 <_free_r+0x90>
 8003576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800357a:	9001      	str	r0, [sp, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f1a1 0404 	sub.w	r4, r1, #4
 8003582:	bfb8      	it	lt
 8003584:	18e4      	addlt	r4, r4, r3
 8003586:	f000 f913 	bl	80037b0 <__malloc_lock>
 800358a:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <_free_r+0x94>)
 800358c:	9801      	ldr	r0, [sp, #4]
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	b933      	cbnz	r3, 80035a0 <_free_r+0x30>
 8003592:	6063      	str	r3, [r4, #4]
 8003594:	6014      	str	r4, [r2, #0]
 8003596:	b003      	add	sp, #12
 8003598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800359c:	f000 b90e 	b.w	80037bc <__malloc_unlock>
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	d908      	bls.n	80035b6 <_free_r+0x46>
 80035a4:	6825      	ldr	r5, [r4, #0]
 80035a6:	1961      	adds	r1, r4, r5
 80035a8:	428b      	cmp	r3, r1
 80035aa:	bf01      	itttt	eq
 80035ac:	6819      	ldreq	r1, [r3, #0]
 80035ae:	685b      	ldreq	r3, [r3, #4]
 80035b0:	1949      	addeq	r1, r1, r5
 80035b2:	6021      	streq	r1, [r4, #0]
 80035b4:	e7ed      	b.n	8003592 <_free_r+0x22>
 80035b6:	461a      	mov	r2, r3
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	b10b      	cbz	r3, 80035c0 <_free_r+0x50>
 80035bc:	42a3      	cmp	r3, r4
 80035be:	d9fa      	bls.n	80035b6 <_free_r+0x46>
 80035c0:	6811      	ldr	r1, [r2, #0]
 80035c2:	1855      	adds	r5, r2, r1
 80035c4:	42a5      	cmp	r5, r4
 80035c6:	d10b      	bne.n	80035e0 <_free_r+0x70>
 80035c8:	6824      	ldr	r4, [r4, #0]
 80035ca:	4421      	add	r1, r4
 80035cc:	1854      	adds	r4, r2, r1
 80035ce:	42a3      	cmp	r3, r4
 80035d0:	6011      	str	r1, [r2, #0]
 80035d2:	d1e0      	bne.n	8003596 <_free_r+0x26>
 80035d4:	681c      	ldr	r4, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	6053      	str	r3, [r2, #4]
 80035da:	4421      	add	r1, r4
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	e7da      	b.n	8003596 <_free_r+0x26>
 80035e0:	d902      	bls.n	80035e8 <_free_r+0x78>
 80035e2:	230c      	movs	r3, #12
 80035e4:	6003      	str	r3, [r0, #0]
 80035e6:	e7d6      	b.n	8003596 <_free_r+0x26>
 80035e8:	6825      	ldr	r5, [r4, #0]
 80035ea:	1961      	adds	r1, r4, r5
 80035ec:	428b      	cmp	r3, r1
 80035ee:	bf04      	itt	eq
 80035f0:	6819      	ldreq	r1, [r3, #0]
 80035f2:	685b      	ldreq	r3, [r3, #4]
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	bf04      	itt	eq
 80035f8:	1949      	addeq	r1, r1, r5
 80035fa:	6021      	streq	r1, [r4, #0]
 80035fc:	6054      	str	r4, [r2, #4]
 80035fe:	e7ca      	b.n	8003596 <_free_r+0x26>
 8003600:	b003      	add	sp, #12
 8003602:	bd30      	pop	{r4, r5, pc}
 8003604:	2000076c 	.word	0x2000076c

08003608 <sbrk_aligned>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	4e0e      	ldr	r6, [pc, #56]	; (8003644 <sbrk_aligned+0x3c>)
 800360c:	460c      	mov	r4, r1
 800360e:	6831      	ldr	r1, [r6, #0]
 8003610:	4605      	mov	r5, r0
 8003612:	b911      	cbnz	r1, 800361a <sbrk_aligned+0x12>
 8003614:	f000 f8bc 	bl	8003790 <_sbrk_r>
 8003618:	6030      	str	r0, [r6, #0]
 800361a:	4621      	mov	r1, r4
 800361c:	4628      	mov	r0, r5
 800361e:	f000 f8b7 	bl	8003790 <_sbrk_r>
 8003622:	1c43      	adds	r3, r0, #1
 8003624:	d00a      	beq.n	800363c <sbrk_aligned+0x34>
 8003626:	1cc4      	adds	r4, r0, #3
 8003628:	f024 0403 	bic.w	r4, r4, #3
 800362c:	42a0      	cmp	r0, r4
 800362e:	d007      	beq.n	8003640 <sbrk_aligned+0x38>
 8003630:	1a21      	subs	r1, r4, r0
 8003632:	4628      	mov	r0, r5
 8003634:	f000 f8ac 	bl	8003790 <_sbrk_r>
 8003638:	3001      	adds	r0, #1
 800363a:	d101      	bne.n	8003640 <sbrk_aligned+0x38>
 800363c:	f04f 34ff 	mov.w	r4, #4294967295
 8003640:	4620      	mov	r0, r4
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	20000770 	.word	0x20000770

08003648 <_malloc_r>:
 8003648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800364c:	1ccd      	adds	r5, r1, #3
 800364e:	f025 0503 	bic.w	r5, r5, #3
 8003652:	3508      	adds	r5, #8
 8003654:	2d0c      	cmp	r5, #12
 8003656:	bf38      	it	cc
 8003658:	250c      	movcc	r5, #12
 800365a:	2d00      	cmp	r5, #0
 800365c:	4607      	mov	r7, r0
 800365e:	db01      	blt.n	8003664 <_malloc_r+0x1c>
 8003660:	42a9      	cmp	r1, r5
 8003662:	d905      	bls.n	8003670 <_malloc_r+0x28>
 8003664:	230c      	movs	r3, #12
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	2600      	movs	r6, #0
 800366a:	4630      	mov	r0, r6
 800366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003670:	4e2e      	ldr	r6, [pc, #184]	; (800372c <_malloc_r+0xe4>)
 8003672:	f000 f89d 	bl	80037b0 <__malloc_lock>
 8003676:	6833      	ldr	r3, [r6, #0]
 8003678:	461c      	mov	r4, r3
 800367a:	bb34      	cbnz	r4, 80036ca <_malloc_r+0x82>
 800367c:	4629      	mov	r1, r5
 800367e:	4638      	mov	r0, r7
 8003680:	f7ff ffc2 	bl	8003608 <sbrk_aligned>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	4604      	mov	r4, r0
 8003688:	d14d      	bne.n	8003726 <_malloc_r+0xde>
 800368a:	6834      	ldr	r4, [r6, #0]
 800368c:	4626      	mov	r6, r4
 800368e:	2e00      	cmp	r6, #0
 8003690:	d140      	bne.n	8003714 <_malloc_r+0xcc>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	4631      	mov	r1, r6
 8003696:	4638      	mov	r0, r7
 8003698:	eb04 0803 	add.w	r8, r4, r3
 800369c:	f000 f878 	bl	8003790 <_sbrk_r>
 80036a0:	4580      	cmp	r8, r0
 80036a2:	d13a      	bne.n	800371a <_malloc_r+0xd2>
 80036a4:	6821      	ldr	r1, [r4, #0]
 80036a6:	3503      	adds	r5, #3
 80036a8:	1a6d      	subs	r5, r5, r1
 80036aa:	f025 0503 	bic.w	r5, r5, #3
 80036ae:	3508      	adds	r5, #8
 80036b0:	2d0c      	cmp	r5, #12
 80036b2:	bf38      	it	cc
 80036b4:	250c      	movcc	r5, #12
 80036b6:	4629      	mov	r1, r5
 80036b8:	4638      	mov	r0, r7
 80036ba:	f7ff ffa5 	bl	8003608 <sbrk_aligned>
 80036be:	3001      	adds	r0, #1
 80036c0:	d02b      	beq.n	800371a <_malloc_r+0xd2>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	442b      	add	r3, r5
 80036c6:	6023      	str	r3, [r4, #0]
 80036c8:	e00e      	b.n	80036e8 <_malloc_r+0xa0>
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	1b52      	subs	r2, r2, r5
 80036ce:	d41e      	bmi.n	800370e <_malloc_r+0xc6>
 80036d0:	2a0b      	cmp	r2, #11
 80036d2:	d916      	bls.n	8003702 <_malloc_r+0xba>
 80036d4:	1961      	adds	r1, r4, r5
 80036d6:	42a3      	cmp	r3, r4
 80036d8:	6025      	str	r5, [r4, #0]
 80036da:	bf18      	it	ne
 80036dc:	6059      	strne	r1, [r3, #4]
 80036de:	6863      	ldr	r3, [r4, #4]
 80036e0:	bf08      	it	eq
 80036e2:	6031      	streq	r1, [r6, #0]
 80036e4:	5162      	str	r2, [r4, r5]
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	4638      	mov	r0, r7
 80036ea:	f104 060b 	add.w	r6, r4, #11
 80036ee:	f000 f865 	bl	80037bc <__malloc_unlock>
 80036f2:	f026 0607 	bic.w	r6, r6, #7
 80036f6:	1d23      	adds	r3, r4, #4
 80036f8:	1af2      	subs	r2, r6, r3
 80036fa:	d0b6      	beq.n	800366a <_malloc_r+0x22>
 80036fc:	1b9b      	subs	r3, r3, r6
 80036fe:	50a3      	str	r3, [r4, r2]
 8003700:	e7b3      	b.n	800366a <_malloc_r+0x22>
 8003702:	6862      	ldr	r2, [r4, #4]
 8003704:	42a3      	cmp	r3, r4
 8003706:	bf0c      	ite	eq
 8003708:	6032      	streq	r2, [r6, #0]
 800370a:	605a      	strne	r2, [r3, #4]
 800370c:	e7ec      	b.n	80036e8 <_malloc_r+0xa0>
 800370e:	4623      	mov	r3, r4
 8003710:	6864      	ldr	r4, [r4, #4]
 8003712:	e7b2      	b.n	800367a <_malloc_r+0x32>
 8003714:	4634      	mov	r4, r6
 8003716:	6876      	ldr	r6, [r6, #4]
 8003718:	e7b9      	b.n	800368e <_malloc_r+0x46>
 800371a:	230c      	movs	r3, #12
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	4638      	mov	r0, r7
 8003720:	f000 f84c 	bl	80037bc <__malloc_unlock>
 8003724:	e7a1      	b.n	800366a <_malloc_r+0x22>
 8003726:	6025      	str	r5, [r4, #0]
 8003728:	e7de      	b.n	80036e8 <_malloc_r+0xa0>
 800372a:	bf00      	nop
 800372c:	2000076c 	.word	0x2000076c

08003730 <_realloc_r>:
 8003730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003734:	4680      	mov	r8, r0
 8003736:	4614      	mov	r4, r2
 8003738:	460e      	mov	r6, r1
 800373a:	b921      	cbnz	r1, 8003746 <_realloc_r+0x16>
 800373c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003740:	4611      	mov	r1, r2
 8003742:	f7ff bf81 	b.w	8003648 <_malloc_r>
 8003746:	b92a      	cbnz	r2, 8003754 <_realloc_r+0x24>
 8003748:	f7ff ff12 	bl	8003570 <_free_r>
 800374c:	4625      	mov	r5, r4
 800374e:	4628      	mov	r0, r5
 8003750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003754:	f000 f838 	bl	80037c8 <_malloc_usable_size_r>
 8003758:	4284      	cmp	r4, r0
 800375a:	4607      	mov	r7, r0
 800375c:	d802      	bhi.n	8003764 <_realloc_r+0x34>
 800375e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003762:	d812      	bhi.n	800378a <_realloc_r+0x5a>
 8003764:	4621      	mov	r1, r4
 8003766:	4640      	mov	r0, r8
 8003768:	f7ff ff6e 	bl	8003648 <_malloc_r>
 800376c:	4605      	mov	r5, r0
 800376e:	2800      	cmp	r0, #0
 8003770:	d0ed      	beq.n	800374e <_realloc_r+0x1e>
 8003772:	42bc      	cmp	r4, r7
 8003774:	4622      	mov	r2, r4
 8003776:	4631      	mov	r1, r6
 8003778:	bf28      	it	cs
 800377a:	463a      	movcs	r2, r7
 800377c:	f7ff fed0 	bl	8003520 <memcpy>
 8003780:	4631      	mov	r1, r6
 8003782:	4640      	mov	r0, r8
 8003784:	f7ff fef4 	bl	8003570 <_free_r>
 8003788:	e7e1      	b.n	800374e <_realloc_r+0x1e>
 800378a:	4635      	mov	r5, r6
 800378c:	e7df      	b.n	800374e <_realloc_r+0x1e>
	...

08003790 <_sbrk_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	4d06      	ldr	r5, [pc, #24]	; (80037ac <_sbrk_r+0x1c>)
 8003794:	2300      	movs	r3, #0
 8003796:	4604      	mov	r4, r0
 8003798:	4608      	mov	r0, r1
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	f7fd faae 	bl	8000cfc <_sbrk>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_sbrk_r+0x1a>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_sbrk_r+0x1a>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	20000774 	.word	0x20000774

080037b0 <__malloc_lock>:
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <__malloc_lock+0x8>)
 80037b2:	f000 b811 	b.w	80037d8 <__retarget_lock_acquire_recursive>
 80037b6:	bf00      	nop
 80037b8:	20000778 	.word	0x20000778

080037bc <__malloc_unlock>:
 80037bc:	4801      	ldr	r0, [pc, #4]	; (80037c4 <__malloc_unlock+0x8>)
 80037be:	f000 b80c 	b.w	80037da <__retarget_lock_release_recursive>
 80037c2:	bf00      	nop
 80037c4:	20000778 	.word	0x20000778

080037c8 <_malloc_usable_size_r>:
 80037c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037cc:	1f18      	subs	r0, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bfbc      	itt	lt
 80037d2:	580b      	ldrlt	r3, [r1, r0]
 80037d4:	18c0      	addlt	r0, r0, r3
 80037d6:	4770      	bx	lr

080037d8 <__retarget_lock_acquire_recursive>:
 80037d8:	4770      	bx	lr

080037da <__retarget_lock_release_recursive>:
 80037da:	4770      	bx	lr

080037dc <_init>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr

080037e8 <_fini>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr
